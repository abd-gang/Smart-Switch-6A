
Switch_5AmpFinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000fd6  0000106a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001d7  00800104  00800104  0000106e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000106e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d31  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082a  00000000  00000000  00001ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008fa  00000000  00000000  000026f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  00002ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069a  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000065d  00000000  00000000  0000398a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003fe7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__bad_interrupt>
   4:	55 c3       	rjmp	.+1706   	; 0x6b0 <__vector_2>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	7c c5       	rjmp	.+2808   	; 0xb02 <__vector_4>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	c0 c3       	rjmp	.+1920   	; 0x794 <__vector_9>
  14:	80 c4       	rjmp	.+2304   	; 0x916 <__vector_10>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	3f c3       	rjmp	.+1662   	; 0x69c <__vector_14>
  1e:	49 c5       	rjmp	.+2706   	; 0xab2 <__vector_15>
  20:	b5 c4       	rjmp	.+2410   	; 0x98c <__vector_16>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	8f c4       	rjmp	.+2334   	; 0x944 <__vector_18>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	e6 ed       	ldi	r30, 0xD6	; 214
  3c:	ff e0       	ldi	r31, 0x0F	; 15
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a4 30       	cpi	r26, 0x04	; 4
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	22 e0       	ldi	r18, 0x02	; 2
  4c:	a4 e0       	ldi	r26, 0x04	; 4
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	ab 3d       	cpi	r26, 0xDB	; 219
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	6f d5       	rcall	.+2782   	; 0xb3a <main>
  5c:	ba c7       	rjmp	.+3956   	; 0xfd2 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <Relay>:
	_BV(WDP2) | _BV(WDP1);   // Set Timeout to ~1 seconds
}

void analog_comp_init()
{
	ACSR = (0<<ACD)|(1<<ACBG)|(1<<ACIE)|(0<<ACIC)|(1<<ACIS1)|(0<<ACIS0); // analog comparator internal BG falling edge
  60:	8f 30       	cpi	r24, 0x0F	; 15
  62:	21 e0       	ldi	r18, 0x01	; 1
  64:	92 07       	cpc	r25, r18
  66:	20 f4       	brcc	.+8      	; 0x70 <Relay+0x10>
  68:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <status>
  6c:	21 11       	cpse	r18, r1
  6e:	05 c0       	rjmp	.+10     	; 0x7a <Relay+0x1a>
  70:	5c 98       	cbi	0x0b, 4	; 11
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <HIGH_CUT_DISPLAY>
  78:	08 95       	ret
  7a:	9c 01       	movw	r18, r24
  7c:	21 50       	subi	r18, 0x01	; 1
  7e:	31 09       	sbc	r19, r1
  80:	2f 39       	cpi	r18, 0x9F	; 159
  82:	31 05       	cpc	r19, r1
  84:	20 f0       	brcs	.+8      	; 0x8e <Relay+0x2e>
  86:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <status>
  8a:	21 11       	cpse	r18, r1
  8c:	02 c0       	rjmp	.+4      	; 0x92 <Relay+0x32>
  8e:	5c 98       	cbi	0x0b, 4	; 11
  90:	08 95       	ret
  92:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <HIGH_CUT_DISPLAY>
  96:	21 11       	cpse	r18, r1
  98:	12 c0       	rjmp	.+36     	; 0xbe <Relay+0x5e>
  9a:	9c 01       	movw	r18, r24
  9c:	2b 5a       	subi	r18, 0xAB	; 171
  9e:	31 09       	sbc	r19, r1
  a0:	23 36       	cpi	r18, 0x63	; 99
  a2:	31 05       	cpc	r19, r1
  a4:	60 f4       	brcc	.+24     	; 0xbe <Relay+0x5e>
  a6:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <counter>
  aa:	21 11       	cpse	r18, r1
  ac:	08 c0       	rjmp	.+16     	; 0xbe <Relay+0x5e>
  ae:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <status>
  b2:	21 30       	cpi	r18, 0x01	; 1
  b4:	21 f4       	brne	.+8      	; 0xbe <Relay+0x5e>
  b6:	5c 9a       	sbi	0x0b, 4	; 11
  b8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <HIGH_DISPLAY>
  bc:	08 95       	ret
  be:	8b 5a       	subi	r24, 0xAB	; 171
  c0:	91 09       	sbc	r25, r1
  c2:	89 35       	cpi	r24, 0x59	; 89
  c4:	91 05       	cpc	r25, r1
  c6:	58 f4       	brcc	.+22     	; 0xde <Relay+0x7e>
  c8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
  cc:	81 11       	cpse	r24, r1
  ce:	07 c0       	rjmp	.+14     	; 0xde <Relay+0x7e>
  d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <status>
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	19 f4       	brne	.+6      	; 0xde <Relay+0x7e>
  d8:	5c 9a       	sbi	0x0b, 4	; 11
  da:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <HIGH_CUT_DISPLAY>
  de:	08 95       	ret

000000e0 <process_voltage_in>:
  e0:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <countAvg.1767>
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <countAvg.1767>
  ea:	40 91 43 01 	lds	r20, 0x0143	; 0x800143 <voltage_out_rms>
  ee:	50 91 44 01 	lds	r21, 0x0144	; 0x800144 <voltage_out_rms+0x1>
  f2:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <voltage_out_rms+0x2>
  f6:	70 91 46 01 	lds	r23, 0x0146	; 0x800146 <voltage_out_rms+0x3>
  fa:	48 0f       	add	r20, r24
  fc:	59 1f       	adc	r21, r25
  fe:	61 1d       	adc	r22, r1
 100:	71 1d       	adc	r23, r1
 102:	40 93 43 01 	sts	0x0143, r20	; 0x800143 <voltage_out_rms>
 106:	50 93 44 01 	sts	0x0144, r21	; 0x800144 <voltage_out_rms+0x1>
 10a:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <voltage_out_rms+0x2>
 10e:	70 93 46 01 	sts	0x0146, r23	; 0x800146 <voltage_out_rms+0x3>
 112:	25 30       	cpi	r18, 0x05	; 5
 114:	80 f1       	brcs	.+96     	; 0x176 <process_voltage_in+0x96>
 116:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <voltage_out_rms>
 11a:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <voltage_out_rms+0x1>
 11e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <voltage_out_rms+0x2>
 122:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <voltage_out_rms+0x3>
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	36 d7       	rcall	.+3692   	; 0xf9a <__divmodsi4>
 12e:	ca 01       	movw	r24, r20
 130:	b9 01       	movw	r22, r18
 132:	1a d6       	rcall	.+3124   	; 0xd68 <__floatsisf>
 134:	21 e7       	ldi	r18, 0x71	; 113
 136:	3d e3       	ldi	r19, 0x3D	; 61
 138:	4a e0       	ldi	r20, 0x0A	; 10
 13a:	50 e4       	ldi	r21, 0x40	; 64
 13c:	7a d5       	rcall	.+2804   	; 0xc32 <__divsf3>
 13e:	e1 d5       	rcall	.+3010   	; 0xd02 <__fixsfsi>
 140:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <voltage_in_rms>
 144:	70 93 48 01 	sts	0x0148, r23	; 0x800148 <voltage_in_rms+0x1>
 148:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <voltage_in_rms+0x2>
 14c:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <voltage_in_rms+0x3>
 150:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <voltage_in_rms>
 154:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <voltage_in_rms+0x1>
 158:	a0 91 49 01 	lds	r26, 0x0149	; 0x800149 <voltage_in_rms+0x2>
 15c:	b0 91 4a 01 	lds	r27, 0x014A	; 0x80014a <voltage_in_rms+0x3>
 160:	7f df       	rcall	.-258    	; 0x60 <Relay>
 162:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <voltage_out_rms>
 166:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <voltage_out_rms+0x1>
 16a:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <voltage_out_rms+0x2>
 16e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <voltage_out_rms+0x3>
 172:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <countAvg.1767>
 176:	08 95       	ret

00000178 <process_power_out>:
 178:	8f 92       	push	r8
 17a:	9f 92       	push	r9
 17c:	af 92       	push	r10
 17e:	bf 92       	push	r11
 180:	cf 92       	push	r12
 182:	df 92       	push	r13
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <countPower.1771>
 190:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <countPower.1771+0x1>
 194:	21 96       	adiw	r28, 0x01	; 1
 196:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <countPower.1771+0x1>
 19a:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <countPower.1771>
 19e:	c0 90 33 01 	lds	r12, 0x0133	; 0x800133 <power_in_rms1>
 1a2:	d0 90 34 01 	lds	r13, 0x0134	; 0x800134 <power_in_rms1+0x1>
 1a6:	e0 90 35 01 	lds	r14, 0x0135	; 0x800135 <power_in_rms1+0x2>
 1aa:	f0 90 36 01 	lds	r15, 0x0136	; 0x800136 <power_in_rms1+0x3>
 1ae:	da d5       	rcall	.+2996   	; 0xd64 <__floatunsisf>
 1b0:	a7 01       	movw	r20, r14
 1b2:	96 01       	movw	r18, r12
 1b4:	da d4       	rcall	.+2484   	; 0xb6a <__addsf3>
 1b6:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <power_in_rms1>
 1ba:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <power_in_rms1+0x1>
 1be:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <power_in_rms1+0x2>
 1c2:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <power_in_rms1+0x3>
 1c6:	c5 30       	cpi	r28, 0x05	; 5
 1c8:	d1 05       	cpc	r29, r1
 1ca:	0c f4       	brge	.+2      	; 0x1ce <process_power_out+0x56>
 1cc:	f5 c0       	rjmp	.+490    	; 0x3b8 <__stack+0xb9>
 1ce:	c0 90 33 01 	lds	r12, 0x0133	; 0x800133 <power_in_rms1>
 1d2:	d0 90 34 01 	lds	r13, 0x0134	; 0x800134 <power_in_rms1+0x1>
 1d6:	e0 90 35 01 	lds	r14, 0x0135	; 0x800135 <power_in_rms1+0x2>
 1da:	f0 90 36 01 	lds	r15, 0x0136	; 0x800136 <power_in_rms1+0x3>
 1de:	be 01       	movw	r22, r28
 1e0:	dd 0f       	add	r29, r29
 1e2:	88 0b       	sbc	r24, r24
 1e4:	99 0b       	sbc	r25, r25
 1e6:	c0 d5       	rcall	.+2944   	; 0xd68 <__floatsisf>
 1e8:	9b 01       	movw	r18, r22
 1ea:	ac 01       	movw	r20, r24
 1ec:	c7 01       	movw	r24, r14
 1ee:	b6 01       	movw	r22, r12
 1f0:	20 d5       	rcall	.+2624   	; 0xc32 <__divsf3>
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 ec       	ldi	r19, 0xC0	; 192
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	54 e4       	ldi	r21, 0x44	; 68
 1fa:	b6 d4       	rcall	.+2412   	; 0xb68 <__subsf3>
 1fc:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <power_in_rms>
 200:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <power_in_rms+0x1>
 204:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <power_in_rms+0x2>
 208:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <power_in_rms+0x3>
 20c:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <power_in_rms>
 210:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <power_in_rms+0x1>
 214:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <power_in_rms+0x2>
 218:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <power_in_rms+0x3>
 21c:	23 ea       	ldi	r18, 0xA3	; 163
 21e:	36 e0       	ldi	r19, 0x06	; 6
 220:	43 e5       	ldi	r20, 0x53	; 83
 222:	5b e3       	ldi	r21, 0x3B	; 59
 224:	2d d6       	rcall	.+3162   	; 0xe80 <__mulsf3>
 226:	21 e7       	ldi	r18, 0x71	; 113
 228:	3d e3       	ldi	r19, 0x3D	; 61
 22a:	42 ef       	ldi	r20, 0xF2	; 242
 22c:	50 e4       	ldi	r21, 0x40	; 64
 22e:	28 d6       	rcall	.+3152   	; 0xe80 <__mulsf3>
 230:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <power_in_rms>
 234:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <power_in_rms+0x1>
 238:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <power_in_rms+0x2>
 23c:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <power_in_rms+0x3>
 240:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <voltage_in_rms>
 244:	70 91 48 01 	lds	r23, 0x0148	; 0x800148 <voltage_in_rms+0x1>
 248:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <voltage_in_rms+0x2>
 24c:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <voltage_in_rms+0x3>
 250:	c0 90 2f 01 	lds	r12, 0x012F	; 0x80012f <power_in_rms>
 254:	d0 90 30 01 	lds	r13, 0x0130	; 0x800130 <power_in_rms+0x1>
 258:	e0 90 31 01 	lds	r14, 0x0131	; 0x800131 <power_in_rms+0x2>
 25c:	f0 90 32 01 	lds	r15, 0x0132	; 0x800132 <power_in_rms+0x3>
 260:	80 90 3b 01 	lds	r8, 0x013B	; 0x80013b <active_power_rms1>
 264:	90 90 3c 01 	lds	r9, 0x013C	; 0x80013c <active_power_rms1+0x1>
 268:	a0 90 3d 01 	lds	r10, 0x013D	; 0x80013d <active_power_rms1+0x2>
 26c:	b0 90 3e 01 	lds	r11, 0x013E	; 0x80013e <active_power_rms1+0x3>
 270:	7b d5       	rcall	.+2806   	; 0xd68 <__floatsisf>
 272:	a7 01       	movw	r20, r14
 274:	96 01       	movw	r18, r12
 276:	04 d6       	rcall	.+3080   	; 0xe80 <__mulsf3>
 278:	6b 01       	movw	r12, r22
 27a:	7c 01       	movw	r14, r24
 27c:	c5 01       	movw	r24, r10
 27e:	b4 01       	movw	r22, r8
 280:	73 d5       	rcall	.+2790   	; 0xd68 <__floatsisf>
 282:	9b 01       	movw	r18, r22
 284:	ac 01       	movw	r20, r24
 286:	c7 01       	movw	r24, r14
 288:	b6 01       	movw	r22, r12
 28a:	6f d4       	rcall	.+2270   	; 0xb6a <__addsf3>
 28c:	3a d5       	rcall	.+2676   	; 0xd02 <__fixsfsi>
 28e:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <active_power_rms1>
 292:	70 93 3c 01 	sts	0x013C, r23	; 0x80013c <active_power_rms1+0x1>
 296:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <active_power_rms1+0x2>
 29a:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <active_power_rms1+0x3>
 29e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <countPower.1771+0x1>
 2a2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <countPower.1771>
 2a6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2aa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 2b4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 2b8:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <power_in_rms1>
 2bc:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <power_in_rms1+0x1>
 2c0:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <power_in_rms1+0x2>
 2c4:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <power_in_rms1+0x3>
 2c8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <power_in_rms>
 2cc:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <power_in_rms+0x1>
 2d0:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <power_in_rms+0x2>
 2d4:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <power_in_rms+0x3>
 2d8:	02 97       	sbiw	r24, 0x02	; 2
 2da:	09 f0       	breq	.+2      	; 0x2de <process_power_out+0x166>
 2dc:	6d c0       	rjmp	.+218    	; 0x3b8 <__stack+0xb9>
 2de:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <active_power_rms1>
 2e2:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <active_power_rms1+0x1>
 2e6:	a0 91 3d 01 	lds	r26, 0x013D	; 0x80013d <active_power_rms1+0x2>
 2ea:	b0 91 3e 01 	lds	r27, 0x013E	; 0x80013e <active_power_rms1+0x3>
 2ee:	bb 23       	and	r27, r27
 2f0:	1c f4       	brge	.+6      	; 0x2f8 <process_power_out+0x180>
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	a1 1d       	adc	r26, r1
 2f6:	b1 1d       	adc	r27, r1
 2f8:	b5 95       	asr	r27
 2fa:	a7 95       	ror	r26
 2fc:	97 95       	ror	r25
 2fe:	87 95       	ror	r24
 300:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <active_power_rms2>
 304:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <active_power_rms2+0x1>
 308:	a0 93 39 01 	sts	0x0139, r26	; 0x800139 <active_power_rms2+0x2>
 30c:	b0 93 3a 01 	sts	0x013A, r27	; 0x80013a <active_power_rms2+0x3>
 310:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <active_power_rms2>
 314:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <active_power_rms2+0x1>
 318:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <active_power_rms2+0x2>
 31c:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <active_power_rms2+0x3>
 320:	84 36       	cpi	r24, 0x64	; 100
 322:	91 05       	cpc	r25, r1
 324:	a1 05       	cpc	r26, r1
 326:	b1 05       	cpc	r27, r1
 328:	a4 f4       	brge	.+40     	; 0x352 <__stack+0x53>
 32a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <active_power_rms2>
 32e:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <active_power_rms2+0x1>
 332:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <active_power_rms2+0x2>
 336:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <active_power_rms2+0x3>
 33a:	07 97       	sbiw	r24, 0x07	; 7
 33c:	a1 09       	sbc	r26, r1
 33e:	b1 09       	sbc	r27, r1
 340:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <active_power_rms>
 344:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <active_power_rms+0x1>
 348:	a0 93 41 01 	sts	0x0141, r26	; 0x800141 <active_power_rms+0x2>
 34c:	b0 93 42 01 	sts	0x0142, r27	; 0x800142 <active_power_rms+0x3>
 350:	17 c0       	rjmp	.+46     	; 0x380 <__stack+0x81>
 352:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <active_power_rms2>
 356:	70 91 38 01 	lds	r23, 0x0138	; 0x800138 <active_power_rms2+0x1>
 35a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <active_power_rms2+0x2>
 35e:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <active_power_rms2+0x3>
 362:	02 d5       	rcall	.+2564   	; 0xd68 <__floatsisf>
 364:	2d ec       	ldi	r18, 0xCD	; 205
 366:	3c ec       	ldi	r19, 0xCC	; 204
 368:	4c e8       	ldi	r20, 0x8C	; 140
 36a:	5f e3       	ldi	r21, 0x3F	; 63
 36c:	89 d5       	rcall	.+2834   	; 0xe80 <__mulsf3>
 36e:	c9 d4       	rcall	.+2450   	; 0xd02 <__fixsfsi>
 370:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <active_power_rms>
 374:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <active_power_rms+0x1>
 378:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <active_power_rms+0x2>
 37c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <active_power_rms+0x3>
 380:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <active_power_rms>
 384:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <active_power_rms+0x1>
 388:	a0 91 41 01 	lds	r26, 0x0141	; 0x800141 <active_power_rms+0x2>
 38c:	b0 91 42 01 	lds	r27, 0x0142	; 0x800142 <active_power_rms+0x3>
 390:	84 31       	cpi	r24, 0x14	; 20
 392:	95 40       	sbci	r25, 0x05	; 5
 394:	a1 05       	cpc	r26, r1
 396:	b1 05       	cpc	r27, r1
 398:	1c f0       	brlt	.+6      	; 0x3a0 <__stack+0xa1>
 39a:	5c 98       	cbi	0x0b, 4	; 11
 39c:	a8 95       	wdr
 39e:	fd cf       	rjmp	.-6      	; 0x39a <__stack+0x9b>
 3a0:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <active_power_rms1>
 3a4:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <active_power_rms1+0x1>
 3a8:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <active_power_rms1+0x2>
 3ac:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <active_power_rms1+0x3>
 3b0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 3b4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	ff 90       	pop	r15
 3be:	ef 90       	pop	r14
 3c0:	df 90       	pop	r13
 3c2:	cf 90       	pop	r12
 3c4:	bf 90       	pop	r11
 3c6:	af 90       	pop	r10
 3c8:	9f 90       	pop	r9
 3ca:	8f 90       	pop	r8
 3cc:	08 95       	ret

000003ce <pin_change_int_init>:
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__EEPROM_REGION_LENGTH__+0x7f0068>
 3d4:	1b ba       	out	0x1b, r1	; 27
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
 3dc:	08 95       	ret

000003de <timer_init>:
 3de:	8a e0       	ldi	r24, 0x0A	; 10
 3e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
 3e4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
 3e8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
 3ec:	80 e8       	ldi	r24, 0x80	; 128
 3ee:	95 e2       	ldi	r25, 0x25	; 37
 3f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 3f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
 3fe:	08 95       	ret

00000400 <interrupt_init>:
 400:	8c e0       	ldi	r24, 0x0C	; 12
 402:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__EEPROM_REGION_LENGTH__+0x7f0069>
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	8d bb       	out	0x1d, r24	; 29
 40a:	08 95       	ret

0000040c <watch_dog_init>:
 40c:	e0 e6       	ldi	r30, 0x60	; 96
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	88 61       	ori	r24, 0x18	; 24
 414:	80 83       	st	Z, r24
 416:	86 e4       	ldi	r24, 0x46	; 70
 418:	80 83       	st	Z, r24
 41a:	08 95       	ret

0000041c <spi_tranceiver>:
}

void spi_tranceiver ()
{
 41c:	cf 92       	push	r12
 41e:	df 92       	push	r13
 420:	ef 92       	push	r14
 422:	ff 92       	push	r15
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	00 d0       	rcall	.+0      	; 0x42e <spi_tranceiver+0x12>
 42e:	00 d0       	rcall	.+0      	; 0x430 <spi_tranceiver+0x14>
 430:	1f 92       	push	r1
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
	sendDataVP[j]='z'; j++;
 436:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <j>
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	ee 5e       	subi	r30, 0xEE	; 238
 43e:	fe 4f       	sbci	r31, 0xFE	; 254
 440:	9a e7       	ldi	r25, 0x7A	; 122
 442:	90 83       	st	Z, r25
 444:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <j>
 448:	8f 5f       	subi	r24, 0xFF	; 255
 44a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <j>
	sendDataVP[j]='z'; j++;
 44e:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <j>
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	ee 5e       	subi	r30, 0xEE	; 238
 456:	fe 4f       	sbci	r31, 0xFE	; 254
 458:	90 83       	st	Z, r25
 45a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <j>
 45e:	8f 5f       	subi	r24, 0xFF	; 255
 460:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <j>
	sendDataVP[j]='S'; j++;
 464:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <j>
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	ee 5e       	subi	r30, 0xEE	; 238
 46c:	fe 4f       	sbci	r31, 0xFE	; 254
 46e:	83 e5       	ldi	r24, 0x53	; 83
 470:	80 83       	st	Z, r24
 472:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <j>
 476:	8f 5f       	subi	r24, 0xFF	; 255
 478:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <j>
	sendDataVP[j]=','; j++;
 47c:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <j>
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	ee 5e       	subi	r30, 0xEE	; 238
 484:	fe 4f       	sbci	r31, 0xFE	; 254
 486:	8c e2       	ldi	r24, 0x2C	; 44
 488:	80 83       	st	Z, r24
 48a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <j>
 48e:	8f 5f       	subi	r24, 0xFF	; 255
 490:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <j>

	//long int dataVP = active_power_rms;
	volatile long int dataVP = active_power_rms<8?2:active_power_rms;
 494:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <active_power_rms>
 498:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <active_power_rms+0x1>
 49c:	a0 91 41 01 	lds	r26, 0x0141	; 0x800141 <active_power_rms+0x2>
 4a0:	b0 91 42 01 	lds	r27, 0x0142	; 0x800142 <active_power_rms+0x3>
 4a4:	08 97       	sbiw	r24, 0x08	; 8
 4a6:	a1 05       	cpc	r26, r1
 4a8:	b1 05       	cpc	r27, r1
 4aa:	4c f0       	brlt	.+18     	; 0x4be <spi_tranceiver+0xa2>
 4ac:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <active_power_rms>
 4b0:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <active_power_rms+0x1>
 4b4:	a0 91 41 01 	lds	r26, 0x0141	; 0x800141 <active_power_rms+0x2>
 4b8:	b0 91 42 01 	lds	r27, 0x0142	; 0x800142 <active_power_rms+0x3>
 4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <spi_tranceiver+0xaa>
 4be:	82 e0       	ldi	r24, 0x02	; 2
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	a0 e0       	ldi	r26, 0x00	; 0
 4c4:	b0 e0       	ldi	r27, 0x00	; 0
 4c6:	89 83       	std	Y+1, r24	; 0x01
 4c8:	9a 83       	std	Y+2, r25	; 0x02
 4ca:	ab 83       	std	Y+3, r26	; 0x03
 4cc:	bc 83       	std	Y+4, r27	; 0x04
	while(dataVP)
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	9a 81       	ldd	r25, Y+2	; 0x02
 4d2:	ab 81       	ldd	r26, Y+3	; 0x03
 4d4:	bc 81       	ldd	r27, Y+4	; 0x04
 4d6:	89 2b       	or	r24, r25
 4d8:	8a 2b       	or	r24, r26
 4da:	8b 2b       	or	r24, r27
 4dc:	81 f1       	breq	.+96     	; 0x53e <spi_tranceiver+0x122>
	{
		volatile uint8_t temp=dataVP%10;
 4de:	0f 2e       	mov	r0, r31
 4e0:	fa e0       	ldi	r31, 0x0A	; 10
 4e2:	cf 2e       	mov	r12, r31
 4e4:	d1 2c       	mov	r13, r1
 4e6:	e1 2c       	mov	r14, r1
 4e8:	f1 2c       	mov	r15, r1
 4ea:	f0 2d       	mov	r31, r0
 4ec:	69 81       	ldd	r22, Y+1	; 0x01
 4ee:	7a 81       	ldd	r23, Y+2	; 0x02
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
 4f2:	9c 81       	ldd	r25, Y+4	; 0x04
 4f4:	a7 01       	movw	r20, r14
 4f6:	96 01       	movw	r18, r12
 4f8:	50 d5       	rcall	.+2720   	; 0xf9a <__divmodsi4>
 4fa:	6d 83       	std	Y+5, r22	; 0x05
		sendDataVP[j]=temp+48;wdt_reset();
 4fc:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <j>
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	8d 81       	ldd	r24, Y+5	; 0x05
 504:	80 5d       	subi	r24, 0xD0	; 208
 506:	ee 5e       	subi	r30, 0xEE	; 238
 508:	fe 4f       	sbci	r31, 0xFE	; 254
 50a:	80 83       	st	Z, r24
 50c:	a8 95       	wdr
		j++;
 50e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <j>
 512:	8f 5f       	subi	r24, 0xFF	; 255
 514:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <j>
		dataVP=dataVP/10;
 518:	69 81       	ldd	r22, Y+1	; 0x01
 51a:	7a 81       	ldd	r23, Y+2	; 0x02
 51c:	8b 81       	ldd	r24, Y+3	; 0x03
 51e:	9c 81       	ldd	r25, Y+4	; 0x04
 520:	a7 01       	movw	r20, r14
 522:	96 01       	movw	r18, r12
 524:	3a d5       	rcall	.+2676   	; 0xf9a <__divmodsi4>
 526:	29 83       	std	Y+1, r18	; 0x01
 528:	3a 83       	std	Y+2, r19	; 0x02
 52a:	4b 83       	std	Y+3, r20	; 0x03
 52c:	5c 83       	std	Y+4, r21	; 0x04
	sendDataVP[j]='S'; j++;
	sendDataVP[j]=','; j++;

	//long int dataVP = active_power_rms;
	volatile long int dataVP = active_power_rms<8?2:active_power_rms;
	while(dataVP)
 52e:	89 81       	ldd	r24, Y+1	; 0x01
 530:	9a 81       	ldd	r25, Y+2	; 0x02
 532:	ab 81       	ldd	r26, Y+3	; 0x03
 534:	bc 81       	ldd	r27, Y+4	; 0x04
 536:	89 2b       	or	r24, r25
 538:	8a 2b       	or	r24, r26
 53a:	8b 2b       	or	r24, r27
 53c:	b9 f6       	brne	.-82     	; 0x4ec <spi_tranceiver+0xd0>
		sendDataVP[j]=temp+48;wdt_reset();
		j++;
		dataVP=dataVP/10;
	}
	
	sendDataVP[j]='P'; j++;
 53e:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <j>
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	ee 5e       	subi	r30, 0xEE	; 238
 546:	fe 4f       	sbci	r31, 0xFE	; 254
 548:	80 e5       	ldi	r24, 0x50	; 80
 54a:	80 83       	st	Z, r24
 54c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <j>
 550:	8f 5f       	subi	r24, 0xFF	; 255
 552:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <j>
	sendDataVP[j]=','; j++;
 556:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <j>
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	ee 5e       	subi	r30, 0xEE	; 238
 55e:	fe 4f       	sbci	r31, 0xFE	; 254
 560:	8c e2       	ldi	r24, 0x2C	; 44
 562:	80 83       	st	Z, r24
 564:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <j>
 568:	8f 5f       	subi	r24, 0xFF	; 255
 56a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <j>

	dataVP = voltage_in_rms;
 56e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <voltage_in_rms>
 572:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <voltage_in_rms+0x1>
 576:	a0 91 49 01 	lds	r26, 0x0149	; 0x800149 <voltage_in_rms+0x2>
 57a:	b0 91 4a 01 	lds	r27, 0x014A	; 0x80014a <voltage_in_rms+0x3>
 57e:	89 83       	std	Y+1, r24	; 0x01
 580:	9a 83       	std	Y+2, r25	; 0x02
 582:	ab 83       	std	Y+3, r26	; 0x03
 584:	bc 83       	std	Y+4, r27	; 0x04
	while(dataVP)
 586:	89 81       	ldd	r24, Y+1	; 0x01
 588:	9a 81       	ldd	r25, Y+2	; 0x02
 58a:	ab 81       	ldd	r26, Y+3	; 0x03
 58c:	bc 81       	ldd	r27, Y+4	; 0x04
 58e:	89 2b       	or	r24, r25
 590:	8a 2b       	or	r24, r26
 592:	8b 2b       	or	r24, r27
 594:	71 f1       	breq	.+92     	; 0x5f2 <spi_tranceiver+0x1d6>
	{
		uint8_t temp=dataVP%10;
		sendDataVP[j]=temp+48;
 596:	0f 2e       	mov	r0, r31
 598:	fa e0       	ldi	r31, 0x0A	; 10
 59a:	cf 2e       	mov	r12, r31
 59c:	d1 2c       	mov	r13, r1
 59e:	e1 2c       	mov	r14, r1
 5a0:	f1 2c       	mov	r15, r1
 5a2:	f0 2d       	mov	r31, r0
	sendDataVP[j]=','; j++;

	dataVP = voltage_in_rms;
	while(dataVP)
	{
		uint8_t temp=dataVP%10;
 5a4:	69 81       	ldd	r22, Y+1	; 0x01
 5a6:	7a 81       	ldd	r23, Y+2	; 0x02
 5a8:	8b 81       	ldd	r24, Y+3	; 0x03
 5aa:	9c 81       	ldd	r25, Y+4	; 0x04
		sendDataVP[j]=temp+48;
 5ac:	00 91 22 01 	lds	r16, 0x0122	; 0x800122 <j>
 5b0:	10 e0       	ldi	r17, 0x00	; 0
 5b2:	a7 01       	movw	r20, r14
 5b4:	96 01       	movw	r18, r12
 5b6:	f1 d4       	rcall	.+2530   	; 0xf9a <__divmodsi4>
 5b8:	60 5d       	subi	r22, 0xD0	; 208
 5ba:	f8 01       	movw	r30, r16
 5bc:	ee 5e       	subi	r30, 0xEE	; 238
 5be:	fe 4f       	sbci	r31, 0xFE	; 254
 5c0:	60 83       	st	Z, r22
		j++;
 5c2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <j>
 5c6:	8f 5f       	subi	r24, 0xFF	; 255
 5c8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <j>
		dataVP=dataVP/10;
 5cc:	69 81       	ldd	r22, Y+1	; 0x01
 5ce:	7a 81       	ldd	r23, Y+2	; 0x02
 5d0:	8b 81       	ldd	r24, Y+3	; 0x03
 5d2:	9c 81       	ldd	r25, Y+4	; 0x04
 5d4:	a7 01       	movw	r20, r14
 5d6:	96 01       	movw	r18, r12
 5d8:	e0 d4       	rcall	.+2496   	; 0xf9a <__divmodsi4>
 5da:	29 83       	std	Y+1, r18	; 0x01
 5dc:	3a 83       	std	Y+2, r19	; 0x02
 5de:	4b 83       	std	Y+3, r20	; 0x03
 5e0:	5c 83       	std	Y+4, r21	; 0x04
	
	sendDataVP[j]='P'; j++;
	sendDataVP[j]=','; j++;

	dataVP = voltage_in_rms;
	while(dataVP)
 5e2:	89 81       	ldd	r24, Y+1	; 0x01
 5e4:	9a 81       	ldd	r25, Y+2	; 0x02
 5e6:	ab 81       	ldd	r26, Y+3	; 0x03
 5e8:	bc 81       	ldd	r27, Y+4	; 0x04
 5ea:	89 2b       	or	r24, r25
 5ec:	8a 2b       	or	r24, r26
 5ee:	8b 2b       	or	r24, r27
 5f0:	c9 f6       	brne	.-78     	; 0x5a4 <spi_tranceiver+0x188>
		uint8_t temp=dataVP%10;
		sendDataVP[j]=temp+48;
		j++;
		dataVP=dataVP/10;
	}
	sendDataVP[j]='V'; j++;
 5f2:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <j>
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	ee 5e       	subi	r30, 0xEE	; 238
 5fa:	fe 4f       	sbci	r31, 0xFE	; 254
 5fc:	86 e5       	ldi	r24, 0x56	; 86
 5fe:	80 83       	st	Z, r24
 600:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <j>
 604:	8f 5f       	subi	r24, 0xFF	; 255
 606:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <j>
	sendDataVP[j]='a'; j++; sendDataVP[j]='a';
 60a:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <j>
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	ee 5e       	subi	r30, 0xEE	; 238
 612:	fe 4f       	sbci	r31, 0xFE	; 254
 614:	91 e6       	ldi	r25, 0x61	; 97
 616:	90 83       	st	Z, r25
 618:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <j>
 61c:	8f 5f       	subi	r24, 0xFF	; 255
 61e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <j>
 622:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <j>
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	ee 5e       	subi	r30, 0xEE	; 238
 62a:	fe 4f       	sbci	r31, 0xFE	; 254
 62c:	90 83       	st	Z, r25
	countbuff=j;
 62e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <j>
 632:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <countbuff>
}
 636:	0f 90       	pop	r0
 638:	0f 90       	pop	r0
 63a:	0f 90       	pop	r0
 63c:	0f 90       	pop	r0
 63e:	0f 90       	pop	r0
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	1f 91       	pop	r17
 646:	0f 91       	pop	r16
 648:	ff 90       	pop	r15
 64a:	ef 90       	pop	r14
 64c:	df 90       	pop	r13
 64e:	cf 90       	pop	r12
 650:	08 95       	ret

00000652 <init>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	80 e8       	ldi	r24, 0x80	; 128
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	f8 94       	cli
 65a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
 65e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
 662:	0f be       	out	0x3f, r0	; 63
// }

void init()
{
	clock_prescale_set(clock_div_1); // cpu clock 8 MHz
	DDRC = 0xCE; //6;
 664:	8e ec       	ldi	r24, 0xCE	; 206
 666:	87 b9       	out	0x07, r24	; 7
	PORTC|=1<<0;   // pulled high
 668:	40 9a       	sbi	0x08, 0	; 8
	DDRB = 0xD3; // test
 66a:	83 ed       	ldi	r24, 0xD3	; 211
 66c:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x7F; // lcd and spi
 66e:	8f e7       	ldi	r24, 0x7F	; 127
 670:	8a b9       	out	0x0a, r24	; 10
	PORTC&=(~(1<<7)); // test
 672:	47 98       	cbi	0x08, 7	; 8
	
	ADMUX = ADMUX_VOLTAGE_IN;      //initial adc setting
 674:	84 e4       	ldi	r24, 0x44	; 68
 676:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	DDRD&=(~(1<<3));//PD@=input int1
 67a:	53 98       	cbi	0x0a, 3	; 10
	cli();
 67c:	f8 94       	cli
	interrupt_init();
 67e:	c0 de       	rcall	.-640    	; 0x400 <interrupt_init>
	PCMSK1=(1<<PCINT8);
}

void adc_init()
{
	ADCSRA = (1 << ADEN) | (1 << ADIE)//| (1<<ADATE)
 680:	8b e8       	ldi	r24, 0x8B	; 139
 682:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	ADMUX = ADMUX_VOLTAGE_IN;      //initial adc setting
	DDRD&=(~(1<<3));//PD@=input int1
	cli();
	interrupt_init();
	adc_init();
	timer_init();
 686:	ab de       	rcall	.-682    	; 0x3de <timer_init>
	watch_dog_init();
 688:	c1 de       	rcall	.-638    	; 0x40c <watch_dog_init>
	_BV(WDP2) | _BV(WDP1);   // Set Timeout to ~1 seconds
}

void analog_comp_init()
{
	ACSR = (0<<ACD)|(1<<ACBG)|(1<<ACIE)|(0<<ACIC)|(1<<ACIS1)|(0<<ACIS0); // analog comparator internal BG falling edge
 68a:	8a e4       	ldi	r24, 0x4A	; 74
 68c:	80 bf       	out	0x30, r24	; 48
#define Interrupt1_Enable		{EIMSK|=(1<<(INT1));}
#define Interrupt1_Disable		{EIMSK&=(~(1<<INT1));}

void spi_slave_init()
{
	SPCR = (1<<SPE)|(1<<SPIE);    //Enable SPI in slave mode
 68e:	80 ec       	ldi	r24, 0xC0	; 192
 690:	8c bd       	out	0x2c, r24	; 44
	adc_init();
	timer_init();
	watch_dog_init();
	analog_comp_init();
	spi_slave_init();
	pin_change_int_init();
 692:	9d de       	rcall	.-710    	; 0x3ce <pin_change_int_init>
	relayOff();
 694:	5c 98       	cbi	0x0b, 4	; 11
	sei(); // //global interrupt enable
 696:	78 94       	sei
	Interrupt1_Enable;
 698:	e9 9a       	sbi	0x1d, 1	; 29
 69a:	08 95       	ret

0000069c <__vector_14>:
}

ISR( TIMER0_OVF_vect)
{//not in use
 69c:	1f 92       	push	r1
 69e:	0f 92       	push	r0
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	0f 92       	push	r0
 6a4:	11 24       	eor	r1, r1
}
 6a6:	0f 90       	pop	r0
 6a8:	0f be       	out	0x3f, r0	; 63
 6aa:	0f 90       	pop	r0
 6ac:	1f 90       	pop	r1
 6ae:	18 95       	reti

000006b0 <__vector_2>:
static int countCycles=0;
ISR( INT1_vect)
{
 6b0:	1f 92       	push	r1
 6b2:	0f 92       	push	r0
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	0f 92       	push	r0
 6b8:	11 24       	eor	r1, r1
 6ba:	2f 93       	push	r18
 6bc:	3f 93       	push	r19
 6be:	4f 93       	push	r20
 6c0:	5f 93       	push	r21
 6c2:	6f 93       	push	r22
 6c4:	7f 93       	push	r23
 6c6:	8f 93       	push	r24
 6c8:	9f 93       	push	r25
 6ca:	af 93       	push	r26
 6cc:	bf 93       	push	r27
 6ce:	ef 93       	push	r30
 6d0:	ff 93       	push	r31
		arrVoltage[countvoltage]=333;
 6d2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <countvoltage>
 6d6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <countvoltage+0x1>
 6da:	fc 01       	movw	r30, r24
 6dc:	ee 0f       	add	r30, r30
 6de:	ff 1f       	adc	r31, r31
 6e0:	e5 5b       	subi	r30, 0xB5	; 181
 6e2:	fe 4f       	sbci	r31, 0xFE	; 254
 6e4:	2d e4       	ldi	r18, 0x4D	; 77
 6e6:	31 e0       	ldi	r19, 0x01	; 1
 6e8:	31 83       	std	Z+1, r19	; 0x01
 6ea:	20 83       	st	Z, r18
			++countvoltage;
 6ec:	01 96       	adiw	r24, 0x01	; 1
			if (countvoltage>=200)
 6ee:	88 3c       	cpi	r24, 0xC8	; 200
 6f0:	91 05       	cpc	r25, r1
 6f2:	2c f4       	brge	.+10     	; 0x6fe <__vector_2+0x4e>
}
static int countCycles=0;
ISR( INT1_vect)
{
		arrVoltage[countvoltage]=333;
			++countvoltage;
 6f4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <countvoltage+0x1>
 6f8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <countvoltage>
 6fc:	04 c0       	rjmp	.+8      	; 0x706 <__vector_2+0x56>
			if (countvoltage>=200)
			{
				countvoltage=0;
 6fe:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <countvoltage+0x1>
 702:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <countvoltage>
			}
	
	ACSR|=(1<<ACI);
 706:	80 b7       	in	r24, 0x30	; 48
 708:	80 61       	ori	r24, 0x10	; 16
 70a:	80 bf       	out	0x30, r24	; 48
	ACSR&=(~(1<<ACD)); // enable comparator
 70c:	80 b7       	in	r24, 0x30	; 48
 70e:	8f 77       	andi	r24, 0x7F	; 127
 710:	80 bf       	out	0x30, r24	; 48
	/*static int countCycles=0;*/
	countCycles++;
 712:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <countCycles>
 716:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <countCycles+0x1>
 71a:	01 96       	adiw	r24, 0x01	; 1
	if(countCycles>=100)
 71c:	84 36       	cpi	r24, 0x64	; 100
 71e:	91 05       	cpc	r25, r1
 720:	2c f4       	brge	.+10     	; 0x72c <__vector_2+0x7c>
			}
	
	ACSR|=(1<<ACI);
	ACSR&=(~(1<<ACD)); // enable comparator
	/*static int countCycles=0;*/
	countCycles++;
 722:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <countCycles+0x1>
 726:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <countCycles>
 72a:	09 c0       	rjmp	.+18     	; 0x73e <__vector_2+0x8e>
	if(countCycles>=100)
	{
		countCycles=0;
 72c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <countCycles+0x1>
 730:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <countCycles>
		j=0; spi_tranceiver();
 734:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <j>
 738:	71 de       	rcall	.-798    	; 0x41c <spi_tranceiver>
		//printf("%c %c %c %c %c", {sendDataVP[3]},{sendDataVP[4]},{sendDataVP[5]},{sendDataVP[6]},{sendDataVP[7]})
		countISR=0;
 73a:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <countISR>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 73e:	87 e5       	ldi	r24, 0x57	; 87
 740:	92 e0       	ldi	r25, 0x02	; 2
 742:	01 97       	sbiw	r24, 0x01	; 1
 744:	f1 f7       	brne	.-4      	; 0x742 <__vector_2+0x92>
 746:	00 c0       	rjmp	.+0      	; 0x748 <__vector_2+0x98>
 748:	00 00       	nop
	}
	_delay_us(300);
	
	TCNT1=0;
 74a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
 74e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIFR1|=(1<<TOV1);
 752:	b0 9a       	sbi	0x16, 0	; 22
	TIMER1_ENABLE; // start timer for 10ms
 754:	e1 e8       	ldi	r30, 0x81	; 129
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	80 81       	ld	r24, Z
 75a:	8a 60       	ori	r24, 0x0A	; 10
 75c:	80 83       	st	Z, r24
	ADMUX = ADMUX_VOLTAGE_IN; ADC_ENABLE;
 75e:	84 e4       	ldi	r24, 0x44	; 68
 760:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 764:	ea e7       	ldi	r30, 0x7A	; 122
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	80 81       	ld	r24, Z
 76a:	80 6c       	ori	r24, 0xC0	; 192
 76c:	80 83       	st	Z, r24
	Interrupt1_Disable; ////// to be removed
 76e:	e9 98       	cbi	0x1d, 1	; 29
	wdt_reset();
 770:	a8 95       	wdr
}
 772:	ff 91       	pop	r31
 774:	ef 91       	pop	r30
 776:	bf 91       	pop	r27
 778:	af 91       	pop	r26
 77a:	9f 91       	pop	r25
 77c:	8f 91       	pop	r24
 77e:	7f 91       	pop	r23
 780:	6f 91       	pop	r22
 782:	5f 91       	pop	r21
 784:	4f 91       	pop	r20
 786:	3f 91       	pop	r19
 788:	2f 91       	pop	r18
 78a:	0f 90       	pop	r0
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	0f 90       	pop	r0
 790:	1f 90       	pop	r1
 792:	18 95       	reti

00000794 <__vector_9>:


static char flag=0;
uint16_t checkVal=0;
ISR( TIMER1_COMPA_vect)
{
 794:	1f 92       	push	r1
 796:	0f 92       	push	r0
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	0f 92       	push	r0
 79c:	11 24       	eor	r1, r1
 79e:	2f 93       	push	r18
 7a0:	3f 93       	push	r19
 7a2:	4f 93       	push	r20
 7a4:	5f 93       	push	r21
 7a6:	6f 93       	push	r22
 7a8:	7f 93       	push	r23
 7aa:	8f 93       	push	r24
 7ac:	9f 93       	push	r25
 7ae:	af 93       	push	r26
 7b0:	bf 93       	push	r27
 7b2:	ef 93       	push	r30
 7b4:	ff 93       	push	r31

	if (!flag) // 9ms routine
 7b6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <flag>
 7ba:	81 11       	cpse	r24, r1
 7bc:	6a c0       	rjmp	.+212    	; 0x892 <__vector_9+0xfe>
	{
			arrVoltage[countvoltage]=444;
 7be:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <countvoltage>
 7c2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <countvoltage+0x1>
 7c6:	fc 01       	movw	r30, r24
 7c8:	ee 0f       	add	r30, r30
 7ca:	ff 1f       	adc	r31, r31
 7cc:	e5 5b       	subi	r30, 0xB5	; 181
 7ce:	fe 4f       	sbci	r31, 0xFE	; 254
 7d0:	2c eb       	ldi	r18, 0xBC	; 188
 7d2:	31 e0       	ldi	r19, 0x01	; 1
 7d4:	31 83       	std	Z+1, r19	; 0x01
 7d6:	20 83       	st	Z, r18
			++countvoltage;
 7d8:	01 96       	adiw	r24, 0x01	; 1
			if (countvoltage>=200)
 7da:	88 3c       	cpi	r24, 0xC8	; 200
 7dc:	91 05       	cpc	r25, r1
 7de:	2c f4       	brge	.+10     	; 0x7ea <__vector_9+0x56>
{

	if (!flag) // 9ms routine
	{
			arrVoltage[countvoltage]=444;
			++countvoltage;
 7e0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <countvoltage+0x1>
 7e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <countvoltage>
 7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <__vector_9+0x5e>
			if (countvoltage>=200)
			{
				countvoltage=0;
 7ea:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <countvoltage+0x1>
 7ee:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <countvoltage>
			}
		TCNT1=0;
 7f2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
 7f6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
		ADCSRA|=(1<<ADIF);
 7fa:	ea e7       	ldi	r30, 0x7A	; 122
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	80 81       	ld	r24, Z
 800:	80 61       	ori	r24, 0x10	; 16
 802:	80 83       	st	Z, r24
		ADC_DISABLE;
 804:	80 81       	ld	r24, Z
 806:	8f 77       	andi	r24, 0x7F	; 127
 808:	80 83       	st	Z, r24
		OCR1A=7000;
 80a:	88 e5       	ldi	r24, 0x58	; 88
 80c:	9b e1       	ldi	r25, 0x1B	; 27
 80e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 812:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
		flag=1;
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <flag>
		//TIMER1_DISABLE;
		checkVal=adcSamples/countADCv;
 81c:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <adcSamples>
 820:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <adcSamples+0x1>
 824:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <adcSamples+0x2>
 828:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <adcSamples+0x3>
 82c:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <countADCv>
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	40 e0       	ldi	r20, 0x00	; 0
 834:	50 e0       	ldi	r21, 0x00	; 0
 836:	8f d3       	rcall	.+1822   	; 0xf56 <__udivmodsi4>
 838:	30 93 0c 01 	sts	0x010C, r19	; 0x80010c <checkVal+0x1>
 83c:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <checkVal>
		//process_voltage_in(adcSamples/countADCv);
		process_voltage_in(checkVal);
 840:	c9 01       	movw	r24, r18
 842:	4e dc       	rcall	.-1892   	; 0xe0 <process_voltage_in>
		process_power_out(adcSamples1/countADCc);
 844:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <adcSamples1>
 848:	70 91 28 01 	lds	r23, 0x0128	; 0x800128 <adcSamples1+0x1>
 84c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <adcSamples1+0x2>
 850:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <adcSamples1+0x3>
 854:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <countADCc>
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	40 e0       	ldi	r20, 0x00	; 0
 85c:	50 e0       	ldi	r21, 0x00	; 0
 85e:	7b d3       	rcall	.+1782   	; 0xf56 <__udivmodsi4>
 860:	ca 01       	movw	r24, r20
 862:	b9 01       	movw	r22, r18
 864:	89 dc       	rcall	.-1774   	; 0x178 <process_power_out>
		adcSamples1=0; adcSamples=0; countADCv=0; countADCc=0;
 866:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <adcSamples1>
 86a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <adcSamples1+0x1>
 86e:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <adcSamples1+0x2>
 872:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <adcSamples1+0x3>
 876:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <adcSamples>
 87a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <adcSamples+0x1>
 87e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <adcSamples+0x2>
 882:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <adcSamples+0x3>
 886:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <countADCv>
 88a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <countADCc>
		// 		OCR1A=//3000;-
		// 		13000;
		// 		flag=1;
		// 		ADMUX = ADMUX_VOLTAGE_IN; ADC_ENABLE;
		// 		//PORTC^=(1<<7);
		PORTC|=(1<<7);
 88e:	47 9a       	sbi	0x08, 7	; 8
 890:	31 c0       	rjmp	.+98     	; 0x8f4 <__vector_9+0x160>
	}
	else // 9 ms + 7 ms routine
	{
			arrVoltage[countvoltage]=555;
 892:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <countvoltage>
 896:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <countvoltage+0x1>
 89a:	fc 01       	movw	r30, r24
 89c:	ee 0f       	add	r30, r30
 89e:	ff 1f       	adc	r31, r31
 8a0:	e5 5b       	subi	r30, 0xB5	; 181
 8a2:	fe 4f       	sbci	r31, 0xFE	; 254
 8a4:	2b e2       	ldi	r18, 0x2B	; 43
 8a6:	32 e0       	ldi	r19, 0x02	; 2
 8a8:	31 83       	std	Z+1, r19	; 0x01
 8aa:	20 83       	st	Z, r18
			++countvoltage;
 8ac:	01 96       	adiw	r24, 0x01	; 1
			if (countvoltage>=200)
 8ae:	88 3c       	cpi	r24, 0xC8	; 200
 8b0:	91 05       	cpc	r25, r1
 8b2:	2c f4       	brge	.+10     	; 0x8be <__vector_9+0x12a>
		PORTC|=(1<<7);
	}
	else // 9 ms + 7 ms routine
	{
			arrVoltage[countvoltage]=555;
			++countvoltage;
 8b4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <countvoltage+0x1>
 8b8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <countvoltage>
 8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__vector_9+0x132>
			if (countvoltage>=200)
			{
				countvoltage=0;
 8be:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <countvoltage+0x1>
 8c2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <countvoltage>
			}
		TIFR1|=(1<<TOV1);
 8c6:	b0 9a       	sbi	0x16, 0	; 22
		TIMER1_DISABLE;
 8c8:	e1 e8       	ldi	r30, 0x81	; 129
 8ca:	f0 e0       	ldi	r31, 0x00	; 0
 8cc:	80 81       	ld	r24, Z
 8ce:	8d 7f       	andi	r24, 0xFD	; 253
 8d0:	80 83       	st	Z, r24
		TIFR1|=(1<<TOV1);
 8d2:	b0 9a       	sbi	0x16, 0	; 22
		TCNT1=0;
 8d4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
 8d8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
		OCR1A=9600;
 8dc:	80 e8       	ldi	r24, 0x80	; 128
 8de:	95 e2       	ldi	r25, 0x25	; 37
 8e0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 8e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
		EIFR=3;
 8e8:	83 e0       	ldi	r24, 0x03	; 3
 8ea:	8c bb       	out	0x1c, r24	; 28
		Interrupt1_Enable;
 8ec:	e9 9a       	sbi	0x1d, 1	; 29
		
		flag=0;
 8ee:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <flag>
		//PORTC^=(1<<7);
		PORTC&=~(1<<7);
 8f2:	47 98       	cbi	0x08, 7	; 8
	}
}
 8f4:	ff 91       	pop	r31
 8f6:	ef 91       	pop	r30
 8f8:	bf 91       	pop	r27
 8fa:	af 91       	pop	r26
 8fc:	9f 91       	pop	r25
 8fe:	8f 91       	pop	r24
 900:	7f 91       	pop	r23
 902:	6f 91       	pop	r22
 904:	5f 91       	pop	r21
 906:	4f 91       	pop	r20
 908:	3f 91       	pop	r19
 90a:	2f 91       	pop	r18
 90c:	0f 90       	pop	r0
 90e:	0f be       	out	0x3f, r0	; 63
 910:	0f 90       	pop	r0
 912:	1f 90       	pop	r1
 914:	18 95       	reti

00000916 <__vector_10>:
int countB = 0;
ISR( TIMER1_COMPB_vect)
{
 916:	1f 92       	push	r1
 918:	0f 92       	push	r0
 91a:	0f b6       	in	r0, 0x3f	; 63
 91c:	0f 92       	push	r0
 91e:	11 24       	eor	r1, r1
 920:	8f 93       	push	r24
 922:	9f 93       	push	r25
	countB++;
 924:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <countB>
 928:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <countB+0x1>
 92c:	01 96       	adiw	r24, 0x01	; 1
 92e:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <countB+0x1>
 932:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <countB>
}
 936:	9f 91       	pop	r25
 938:	8f 91       	pop	r24
 93a:	0f 90       	pop	r0
 93c:	0f be       	out	0x3f, r0	; 63
 93e:	0f 90       	pop	r0
 940:	1f 90       	pop	r1
 942:	18 95       	reti

00000944 <__vector_18>:
// 	//EIFR=3;
// 	Interrupt1_Enable; ////// to be removed
// }

ISR(ANALOG_COMP_vect)
{
 944:	1f 92       	push	r1
 946:	0f 92       	push	r0
 948:	0f b6       	in	r0, 0x3f	; 63
 94a:	0f 92       	push	r0
 94c:	11 24       	eor	r1, r1
 94e:	8f 93       	push	r24
	if(counter==0)
 950:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
 954:	81 11       	cpse	r24, r1
 956:	14 c0       	rjmp	.+40     	; 0x980 <__vector_18+0x3c>
	{
		//countCycles=0;
		countISR++;
 958:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <countISR>
 95c:	8f 5f       	subi	r24, 0xFF	; 255
 95e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <countISR>
		ACSR|=(1<<ACI);
 962:	80 b7       	in	r24, 0x30	; 48
 964:	80 61       	ori	r24, 0x10	; 16
 966:	80 bf       	out	0x30, r24	; 48
		ACSR|=((1<<ACD)); // disable comparator
 968:	80 b7       	in	r24, 0x30	; 48
 96a:	80 68       	ori	r24, 0x80	; 128
 96c:	80 bf       	out	0x30, r24	; 48
		if (countISR==10)
 96e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <countISR>
 972:	8a 30       	cpi	r24, 0x0A	; 10
 974:	29 f4       	brne	.+10     	; 0x980 <__vector_18+0x3c>
		{
			while(1)
			{
				relayOff();
 976:	5c 98       	cbi	0x0b, 4	; 11
				countISR=0;	wdt_reset();
 978:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <countISR>
 97c:	a8 95       	wdr
 97e:	fb cf       	rjmp	.-10     	; 0x976 <__vector_18+0x32>
			}
		}
	}
}
 980:	8f 91       	pop	r24
 982:	0f 90       	pop	r0
 984:	0f be       	out	0x3f, r0	; 63
 986:	0f 90       	pop	r0
 988:	1f 90       	pop	r1
 98a:	18 95       	reti

0000098c <__vector_16>:

ISR( ADC_vect)
{
 98c:	1f 92       	push	r1
 98e:	0f 92       	push	r0
 990:	0f b6       	in	r0, 0x3f	; 63
 992:	0f 92       	push	r0
 994:	11 24       	eor	r1, r1
 996:	2f 93       	push	r18
 998:	3f 93       	push	r19
 99a:	4f 93       	push	r20
 99c:	5f 93       	push	r21
 99e:	6f 93       	push	r22
 9a0:	7f 93       	push	r23
 9a2:	8f 93       	push	r24
 9a4:	9f 93       	push	r25
 9a6:	af 93       	push	r26
 9a8:	bf 93       	push	r27
 9aa:	ef 93       	push	r30
 9ac:	ff 93       	push	r31

	int val = ADCW;
 9ae:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 9b2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
	switch(ADMUX)
 9b6:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 9ba:	24 34       	cpi	r18, 0x44	; 68
 9bc:	21 f0       	breq	.+8      	; 0x9c6 <__vector_16+0x3a>
 9be:	25 34       	cpi	r18, 0x45	; 69
 9c0:	09 f4       	brne	.+2      	; 0x9c4 <__vector_16+0x38>
 9c2:	41 c0       	rjmp	.+130    	; 0xa46 <__vector_16+0xba>
 9c4:	65 c0       	rjmp	.+202    	; 0xa90 <__vector_16+0x104>
	{
		case ADMUX_VOLTAGE_IN:
		adcSamples+=val; countADCv++;
 9c6:	40 91 2b 01 	lds	r20, 0x012B	; 0x80012b <adcSamples>
 9ca:	50 91 2c 01 	lds	r21, 0x012C	; 0x80012c <adcSamples+0x1>
 9ce:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <adcSamples+0x2>
 9d2:	70 91 2e 01 	lds	r23, 0x012E	; 0x80012e <adcSamples+0x3>
 9d6:	09 2e       	mov	r0, r25
 9d8:	00 0c       	add	r0, r0
 9da:	aa 0b       	sbc	r26, r26
 9dc:	bb 0b       	sbc	r27, r27
 9de:	84 0f       	add	r24, r20
 9e0:	95 1f       	adc	r25, r21
 9e2:	a6 1f       	adc	r26, r22
 9e4:	b7 1f       	adc	r27, r23
 9e6:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <adcSamples>
 9ea:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <adcSamples+0x1>
 9ee:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <adcSamples+0x2>
 9f2:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <adcSamples+0x3>
 9f6:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <countADCv>
 9fa:	8f 5f       	subi	r24, 0xFF	; 255
 9fc:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <countADCv>
// 			if (countvoltage>=200)
// 			{
// 				countvoltage=0;
// 			}
		}
				arrVoltage[countvoltage]=22;
 a00:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <countvoltage>
 a04:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <countvoltage+0x1>
 a08:	fc 01       	movw	r30, r24
 a0a:	ee 0f       	add	r30, r30
 a0c:	ff 1f       	adc	r31, r31
 a0e:	e5 5b       	subi	r30, 0xB5	; 181
 a10:	fe 4f       	sbci	r31, 0xFE	; 254
 a12:	26 e1       	ldi	r18, 0x16	; 22
 a14:	30 e0       	ldi	r19, 0x00	; 0
 a16:	31 83       	std	Z+1, r19	; 0x01
 a18:	20 83       	st	Z, r18
		++countvoltage;
 a1a:	01 96       	adiw	r24, 0x01	; 1
		if (countvoltage>=200)
 a1c:	88 3c       	cpi	r24, 0xC8	; 200
 a1e:	91 05       	cpc	r25, r1
 a20:	2c f4       	brge	.+10     	; 0xa2c <__vector_16+0xa0>
// 			{
// 				countvoltage=0;
// 			}
		}
				arrVoltage[countvoltage]=22;
		++countvoltage;
 a22:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <countvoltage+0x1>
 a26:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <countvoltage>
 a2a:	04 c0       	rjmp	.+8      	; 0xa34 <__vector_16+0xa8>
		if (countvoltage>=200)
		{
			countvoltage=0;
 a2c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <countvoltage+0x1>
 a30:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <countvoltage>
		}
		ADMUX=ADMUX_CURRENT_IN;
 a34:	85 e4       	ldi	r24, 0x45	; 69
 a36:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
		ADC_ENABLE;
 a3a:	ea e7       	ldi	r30, 0x7A	; 122
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	80 81       	ld	r24, Z
 a40:	80 6c       	ori	r24, 0xC0	; 192
 a42:	80 83       	st	Z, r24
		break;
 a44:	25 c0       	rjmp	.+74     	; 0xa90 <__vector_16+0x104>
		
		case ADMUX_CURRENT_IN:
		adcSamples1+=val; countADCc++;
 a46:	40 91 27 01 	lds	r20, 0x0127	; 0x800127 <adcSamples1>
 a4a:	50 91 28 01 	lds	r21, 0x0128	; 0x800128 <adcSamples1+0x1>
 a4e:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <adcSamples1+0x2>
 a52:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <adcSamples1+0x3>
 a56:	09 2e       	mov	r0, r25
 a58:	00 0c       	add	r0, r0
 a5a:	aa 0b       	sbc	r26, r26
 a5c:	bb 0b       	sbc	r27, r27
 a5e:	84 0f       	add	r24, r20
 a60:	95 1f       	adc	r25, r21
 a62:	a6 1f       	adc	r26, r22
 a64:	b7 1f       	adc	r27, r23
 a66:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <adcSamples1>
 a6a:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <adcSamples1+0x1>
 a6e:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <adcSamples1+0x2>
 a72:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <adcSamples1+0x3>
 a76:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <countADCc>
 a7a:	8f 5f       	subi	r24, 0xFF	; 255
 a7c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <countADCc>
		ADMUX=ADMUX_VOLTAGE_IN;
 a80:	84 e4       	ldi	r24, 0x44	; 68
 a82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
		ADC_ENABLE;
 a86:	ea e7       	ldi	r30, 0x7A	; 122
 a88:	f0 e0       	ldi	r31, 0x00	; 0
 a8a:	80 81       	ld	r24, Z
 a8c:	80 6c       	ori	r24, 0xC0	; 192
 a8e:	80 83       	st	Z, r24
		break;
	}
}
 a90:	ff 91       	pop	r31
 a92:	ef 91       	pop	r30
 a94:	bf 91       	pop	r27
 a96:	af 91       	pop	r26
 a98:	9f 91       	pop	r25
 a9a:	8f 91       	pop	r24
 a9c:	7f 91       	pop	r23
 a9e:	6f 91       	pop	r22
 aa0:	5f 91       	pop	r21
 aa2:	4f 91       	pop	r20
 aa4:	3f 91       	pop	r19
 aa6:	2f 91       	pop	r18
 aa8:	0f 90       	pop	r0
 aaa:	0f be       	out	0x3f, r0	; 63
 aac:	0f 90       	pop	r0
 aae:	1f 90       	pop	r1
 ab0:	18 95       	reti

00000ab2 <__vector_15>:

ISR(SPI_STC_vect)
{
 ab2:	1f 92       	push	r1
 ab4:	0f 92       	push	r0
 ab6:	0f b6       	in	r0, 0x3f	; 63
 ab8:	0f 92       	push	r0
 aba:	11 24       	eor	r1, r1
 abc:	8f 93       	push	r24
 abe:	ef 93       	push	r30
 ac0:	ff 93       	push	r31
	if(counter==0 && j!=0)
 ac2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
 ac6:	81 11       	cpse	r24, r1
 ac8:	10 c0       	rjmp	.+32     	; 0xaea <__vector_15+0x38>
 aca:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <j>
 ace:	88 23       	and	r24, r24
 ad0:	61 f0       	breq	.+24     	; 0xaea <__vector_15+0x38>
	{
		//uint8_t data=SPDR; // get the data from master // not using currently
		SPDR=sendDataVP[j--];
 ad2:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <j>
 ad6:	8f ef       	ldi	r24, 0xFF	; 255
 ad8:	8e 0f       	add	r24, r30
 ada:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <j>
 ade:	f0 e0       	ldi	r31, 0x00	; 0
 ae0:	ee 5e       	subi	r30, 0xEE	; 238
 ae2:	fe 4f       	sbci	r31, 0xFE	; 254
 ae4:	80 81       	ld	r24, Z
 ae6:	8e bd       	out	0x2e, r24	; 46
 ae8:	04 c0       	rjmp	.+8      	; 0xaf2 <__vector_15+0x40>
	}
	else
	{
		j=countbuff; return;
 aea:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <countbuff>
 aee:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <j>
	}
}
 af2:	ff 91       	pop	r31
 af4:	ef 91       	pop	r30
 af6:	8f 91       	pop	r24
 af8:	0f 90       	pop	r0
 afa:	0f be       	out	0x3f, r0	; 63
 afc:	0f 90       	pop	r0
 afe:	1f 90       	pop	r1
 b00:	18 95       	reti

00000b02 <__vector_4>:

ISR(PCINT1_vect)
{
 b02:	1f 92       	push	r1
 b04:	0f 92       	push	r0
 b06:	0f b6       	in	r0, 0x3f	; 63
 b08:	0f 92       	push	r0
 b0a:	11 24       	eor	r1, r1
 b0c:	8f 93       	push	r24
	if (counter==0)
 b0e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
 b12:	81 11       	cpse	r24, r1
 b14:	0c c0       	rjmp	.+24     	; 0xb2e <__vector_4+0x2c>
	{
		if(bit_is_clear(PINC,PINC0))
 b16:	30 99       	sbic	0x06, 0	; 6
 b18:	04 c0       	rjmp	.+8      	; 0xb22 <__vector_4+0x20>
		{
			status=0; relayOff();
 b1a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <status>
 b1e:	5c 98       	cbi	0x0b, 4	; 11
 b20:	06 c0       	rjmp	.+12     	; 0xb2e <__vector_4+0x2c>
		}
		else if(!(bit_is_clear(PINC,PINC0)))
 b22:	30 9b       	sbis	0x06, 0	; 6
 b24:	04 c0       	rjmp	.+8      	; 0xb2e <__vector_4+0x2c>
		{
			status=1; relayOn();
 b26:	81 e0       	ldi	r24, 0x01	; 1
 b28:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <status>
 b2c:	5c 9a       	sbi	0x0b, 4	; 11
		}
	}
}
 b2e:	8f 91       	pop	r24
 b30:	0f 90       	pop	r0
 b32:	0f be       	out	0x3f, r0	; 63
 b34:	0f 90       	pop	r0
 b36:	1f 90       	pop	r1
 b38:	18 95       	reti

00000b3a <main>:


int main(void)
{
	init();
 b3a:	8b dd       	rcall	.-1258   	; 0x652 <init>
	while (1)
	{
		if(counter)
 b3c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
 b40:	88 23       	and	r24, r24
 b42:	79 f0       	breq	.+30     	; 0xb62 <main+0x28>
		{
			counter--; _delay_ms(300);
 b44:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
 b48:	81 50       	subi	r24, 0x01	; 1
 b4a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b4e:	2f ef       	ldi	r18, 0xFF	; 255
 b50:	82 e5       	ldi	r24, 0x52	; 82
 b52:	97 e0       	ldi	r25, 0x07	; 7
 b54:	21 50       	subi	r18, 0x01	; 1
 b56:	80 40       	sbci	r24, 0x00	; 0
 b58:	90 40       	sbci	r25, 0x00	; 0
 b5a:	e1 f7       	brne	.-8      	; 0xb54 <main+0x1a>
 b5c:	00 c0       	rjmp	.+0      	; 0xb5e <main+0x24>
 b5e:	00 00       	nop
 b60:	ed cf       	rjmp	.-38     	; 0xb3c <main+0x2>
		}
		else counter=0;
 b62:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counter>
 b66:	ea cf       	rjmp	.-44     	; 0xb3c <main+0x2>

00000b68 <__subsf3>:
 b68:	50 58       	subi	r21, 0x80	; 128

00000b6a <__addsf3>:
 b6a:	bb 27       	eor	r27, r27
 b6c:	aa 27       	eor	r26, r26
 b6e:	0e d0       	rcall	.+28     	; 0xb8c <__addsf3x>
 b70:	4d c1       	rjmp	.+666    	; 0xe0c <__fp_round>
 b72:	3e d1       	rcall	.+636    	; 0xdf0 <__fp_pscA>
 b74:	30 f0       	brcs	.+12     	; 0xb82 <__addsf3+0x18>
 b76:	43 d1       	rcall	.+646    	; 0xdfe <__fp_pscB>
 b78:	20 f0       	brcs	.+8      	; 0xb82 <__addsf3+0x18>
 b7a:	31 f4       	brne	.+12     	; 0xb88 <__addsf3+0x1e>
 b7c:	9f 3f       	cpi	r25, 0xFF	; 255
 b7e:	11 f4       	brne	.+4      	; 0xb84 <__addsf3+0x1a>
 b80:	1e f4       	brtc	.+6      	; 0xb88 <__addsf3+0x1e>
 b82:	33 c1       	rjmp	.+614    	; 0xdea <__fp_nan>
 b84:	0e f4       	brtc	.+2      	; 0xb88 <__addsf3+0x1e>
 b86:	e0 95       	com	r30
 b88:	e7 fb       	bst	r30, 7
 b8a:	29 c1       	rjmp	.+594    	; 0xdde <__fp_inf>

00000b8c <__addsf3x>:
 b8c:	e9 2f       	mov	r30, r25
 b8e:	4f d1       	rcall	.+670    	; 0xe2e <__fp_split3>
 b90:	80 f3       	brcs	.-32     	; 0xb72 <__addsf3+0x8>
 b92:	ba 17       	cp	r27, r26
 b94:	62 07       	cpc	r22, r18
 b96:	73 07       	cpc	r23, r19
 b98:	84 07       	cpc	r24, r20
 b9a:	95 07       	cpc	r25, r21
 b9c:	18 f0       	brcs	.+6      	; 0xba4 <__addsf3x+0x18>
 b9e:	71 f4       	brne	.+28     	; 0xbbc <__addsf3x+0x30>
 ba0:	9e f5       	brtc	.+102    	; 0xc08 <__addsf3x+0x7c>
 ba2:	67 c1       	rjmp	.+718    	; 0xe72 <__fp_zero>
 ba4:	0e f4       	brtc	.+2      	; 0xba8 <__addsf3x+0x1c>
 ba6:	e0 95       	com	r30
 ba8:	0b 2e       	mov	r0, r27
 baa:	ba 2f       	mov	r27, r26
 bac:	a0 2d       	mov	r26, r0
 bae:	0b 01       	movw	r0, r22
 bb0:	b9 01       	movw	r22, r18
 bb2:	90 01       	movw	r18, r0
 bb4:	0c 01       	movw	r0, r24
 bb6:	ca 01       	movw	r24, r20
 bb8:	a0 01       	movw	r20, r0
 bba:	11 24       	eor	r1, r1
 bbc:	ff 27       	eor	r31, r31
 bbe:	59 1b       	sub	r21, r25
 bc0:	99 f0       	breq	.+38     	; 0xbe8 <__addsf3x+0x5c>
 bc2:	59 3f       	cpi	r21, 0xF9	; 249
 bc4:	50 f4       	brcc	.+20     	; 0xbda <__addsf3x+0x4e>
 bc6:	50 3e       	cpi	r21, 0xE0	; 224
 bc8:	68 f1       	brcs	.+90     	; 0xc24 <__addsf3x+0x98>
 bca:	1a 16       	cp	r1, r26
 bcc:	f0 40       	sbci	r31, 0x00	; 0
 bce:	a2 2f       	mov	r26, r18
 bd0:	23 2f       	mov	r18, r19
 bd2:	34 2f       	mov	r19, r20
 bd4:	44 27       	eor	r20, r20
 bd6:	58 5f       	subi	r21, 0xF8	; 248
 bd8:	f3 cf       	rjmp	.-26     	; 0xbc0 <__addsf3x+0x34>
 bda:	46 95       	lsr	r20
 bdc:	37 95       	ror	r19
 bde:	27 95       	ror	r18
 be0:	a7 95       	ror	r26
 be2:	f0 40       	sbci	r31, 0x00	; 0
 be4:	53 95       	inc	r21
 be6:	c9 f7       	brne	.-14     	; 0xbda <__addsf3x+0x4e>
 be8:	7e f4       	brtc	.+30     	; 0xc08 <__addsf3x+0x7c>
 bea:	1f 16       	cp	r1, r31
 bec:	ba 0b       	sbc	r27, r26
 bee:	62 0b       	sbc	r22, r18
 bf0:	73 0b       	sbc	r23, r19
 bf2:	84 0b       	sbc	r24, r20
 bf4:	ba f0       	brmi	.+46     	; 0xc24 <__addsf3x+0x98>
 bf6:	91 50       	subi	r25, 0x01	; 1
 bf8:	a1 f0       	breq	.+40     	; 0xc22 <__addsf3x+0x96>
 bfa:	ff 0f       	add	r31, r31
 bfc:	bb 1f       	adc	r27, r27
 bfe:	66 1f       	adc	r22, r22
 c00:	77 1f       	adc	r23, r23
 c02:	88 1f       	adc	r24, r24
 c04:	c2 f7       	brpl	.-16     	; 0xbf6 <__addsf3x+0x6a>
 c06:	0e c0       	rjmp	.+28     	; 0xc24 <__addsf3x+0x98>
 c08:	ba 0f       	add	r27, r26
 c0a:	62 1f       	adc	r22, r18
 c0c:	73 1f       	adc	r23, r19
 c0e:	84 1f       	adc	r24, r20
 c10:	48 f4       	brcc	.+18     	; 0xc24 <__addsf3x+0x98>
 c12:	87 95       	ror	r24
 c14:	77 95       	ror	r23
 c16:	67 95       	ror	r22
 c18:	b7 95       	ror	r27
 c1a:	f7 95       	ror	r31
 c1c:	9e 3f       	cpi	r25, 0xFE	; 254
 c1e:	08 f0       	brcs	.+2      	; 0xc22 <__addsf3x+0x96>
 c20:	b3 cf       	rjmp	.-154    	; 0xb88 <__addsf3+0x1e>
 c22:	93 95       	inc	r25
 c24:	88 0f       	add	r24, r24
 c26:	08 f0       	brcs	.+2      	; 0xc2a <__addsf3x+0x9e>
 c28:	99 27       	eor	r25, r25
 c2a:	ee 0f       	add	r30, r30
 c2c:	97 95       	ror	r25
 c2e:	87 95       	ror	r24
 c30:	08 95       	ret

00000c32 <__divsf3>:
 c32:	0c d0       	rcall	.+24     	; 0xc4c <__divsf3x>
 c34:	eb c0       	rjmp	.+470    	; 0xe0c <__fp_round>
 c36:	e3 d0       	rcall	.+454    	; 0xdfe <__fp_pscB>
 c38:	40 f0       	brcs	.+16     	; 0xc4a <__divsf3+0x18>
 c3a:	da d0       	rcall	.+436    	; 0xdf0 <__fp_pscA>
 c3c:	30 f0       	brcs	.+12     	; 0xc4a <__divsf3+0x18>
 c3e:	21 f4       	brne	.+8      	; 0xc48 <__divsf3+0x16>
 c40:	5f 3f       	cpi	r21, 0xFF	; 255
 c42:	19 f0       	breq	.+6      	; 0xc4a <__divsf3+0x18>
 c44:	cc c0       	rjmp	.+408    	; 0xdde <__fp_inf>
 c46:	51 11       	cpse	r21, r1
 c48:	15 c1       	rjmp	.+554    	; 0xe74 <__fp_szero>
 c4a:	cf c0       	rjmp	.+414    	; 0xdea <__fp_nan>

00000c4c <__divsf3x>:
 c4c:	f0 d0       	rcall	.+480    	; 0xe2e <__fp_split3>
 c4e:	98 f3       	brcs	.-26     	; 0xc36 <__divsf3+0x4>

00000c50 <__divsf3_pse>:
 c50:	99 23       	and	r25, r25
 c52:	c9 f3       	breq	.-14     	; 0xc46 <__divsf3+0x14>
 c54:	55 23       	and	r21, r21
 c56:	b1 f3       	breq	.-20     	; 0xc44 <__divsf3+0x12>
 c58:	95 1b       	sub	r25, r21
 c5a:	55 0b       	sbc	r21, r21
 c5c:	bb 27       	eor	r27, r27
 c5e:	aa 27       	eor	r26, r26
 c60:	62 17       	cp	r22, r18
 c62:	73 07       	cpc	r23, r19
 c64:	84 07       	cpc	r24, r20
 c66:	38 f0       	brcs	.+14     	; 0xc76 <__divsf3_pse+0x26>
 c68:	9f 5f       	subi	r25, 0xFF	; 255
 c6a:	5f 4f       	sbci	r21, 0xFF	; 255
 c6c:	22 0f       	add	r18, r18
 c6e:	33 1f       	adc	r19, r19
 c70:	44 1f       	adc	r20, r20
 c72:	aa 1f       	adc	r26, r26
 c74:	a9 f3       	breq	.-22     	; 0xc60 <__divsf3_pse+0x10>
 c76:	33 d0       	rcall	.+102    	; 0xcde <__divsf3_pse+0x8e>
 c78:	0e 2e       	mov	r0, r30
 c7a:	3a f0       	brmi	.+14     	; 0xc8a <__divsf3_pse+0x3a>
 c7c:	e0 e8       	ldi	r30, 0x80	; 128
 c7e:	30 d0       	rcall	.+96     	; 0xce0 <__divsf3_pse+0x90>
 c80:	91 50       	subi	r25, 0x01	; 1
 c82:	50 40       	sbci	r21, 0x00	; 0
 c84:	e6 95       	lsr	r30
 c86:	00 1c       	adc	r0, r0
 c88:	ca f7       	brpl	.-14     	; 0xc7c <__divsf3_pse+0x2c>
 c8a:	29 d0       	rcall	.+82     	; 0xcde <__divsf3_pse+0x8e>
 c8c:	fe 2f       	mov	r31, r30
 c8e:	27 d0       	rcall	.+78     	; 0xcde <__divsf3_pse+0x8e>
 c90:	66 0f       	add	r22, r22
 c92:	77 1f       	adc	r23, r23
 c94:	88 1f       	adc	r24, r24
 c96:	bb 1f       	adc	r27, r27
 c98:	26 17       	cp	r18, r22
 c9a:	37 07       	cpc	r19, r23
 c9c:	48 07       	cpc	r20, r24
 c9e:	ab 07       	cpc	r26, r27
 ca0:	b0 e8       	ldi	r27, 0x80	; 128
 ca2:	09 f0       	breq	.+2      	; 0xca6 <__divsf3_pse+0x56>
 ca4:	bb 0b       	sbc	r27, r27
 ca6:	80 2d       	mov	r24, r0
 ca8:	bf 01       	movw	r22, r30
 caa:	ff 27       	eor	r31, r31
 cac:	93 58       	subi	r25, 0x83	; 131
 cae:	5f 4f       	sbci	r21, 0xFF	; 255
 cb0:	2a f0       	brmi	.+10     	; 0xcbc <__divsf3_pse+0x6c>
 cb2:	9e 3f       	cpi	r25, 0xFE	; 254
 cb4:	51 05       	cpc	r21, r1
 cb6:	68 f0       	brcs	.+26     	; 0xcd2 <__divsf3_pse+0x82>
 cb8:	92 c0       	rjmp	.+292    	; 0xdde <__fp_inf>
 cba:	dc c0       	rjmp	.+440    	; 0xe74 <__fp_szero>
 cbc:	5f 3f       	cpi	r21, 0xFF	; 255
 cbe:	ec f3       	brlt	.-6      	; 0xcba <__divsf3_pse+0x6a>
 cc0:	98 3e       	cpi	r25, 0xE8	; 232
 cc2:	dc f3       	brlt	.-10     	; 0xcba <__divsf3_pse+0x6a>
 cc4:	86 95       	lsr	r24
 cc6:	77 95       	ror	r23
 cc8:	67 95       	ror	r22
 cca:	b7 95       	ror	r27
 ccc:	f7 95       	ror	r31
 cce:	9f 5f       	subi	r25, 0xFF	; 255
 cd0:	c9 f7       	brne	.-14     	; 0xcc4 <__divsf3_pse+0x74>
 cd2:	88 0f       	add	r24, r24
 cd4:	91 1d       	adc	r25, r1
 cd6:	96 95       	lsr	r25
 cd8:	87 95       	ror	r24
 cda:	97 f9       	bld	r25, 7
 cdc:	08 95       	ret
 cde:	e1 e0       	ldi	r30, 0x01	; 1
 ce0:	66 0f       	add	r22, r22
 ce2:	77 1f       	adc	r23, r23
 ce4:	88 1f       	adc	r24, r24
 ce6:	bb 1f       	adc	r27, r27
 ce8:	62 17       	cp	r22, r18
 cea:	73 07       	cpc	r23, r19
 cec:	84 07       	cpc	r24, r20
 cee:	ba 07       	cpc	r27, r26
 cf0:	20 f0       	brcs	.+8      	; 0xcfa <__divsf3_pse+0xaa>
 cf2:	62 1b       	sub	r22, r18
 cf4:	73 0b       	sbc	r23, r19
 cf6:	84 0b       	sbc	r24, r20
 cf8:	ba 0b       	sbc	r27, r26
 cfa:	ee 1f       	adc	r30, r30
 cfc:	88 f7       	brcc	.-30     	; 0xce0 <__divsf3_pse+0x90>
 cfe:	e0 95       	com	r30
 d00:	08 95       	ret

00000d02 <__fixsfsi>:
 d02:	04 d0       	rcall	.+8      	; 0xd0c <__fixunssfsi>
 d04:	68 94       	set
 d06:	b1 11       	cpse	r27, r1
 d08:	b5 c0       	rjmp	.+362    	; 0xe74 <__fp_szero>
 d0a:	08 95       	ret

00000d0c <__fixunssfsi>:
 d0c:	98 d0       	rcall	.+304    	; 0xe3e <__fp_splitA>
 d0e:	88 f0       	brcs	.+34     	; 0xd32 <__fixunssfsi+0x26>
 d10:	9f 57       	subi	r25, 0x7F	; 127
 d12:	90 f0       	brcs	.+36     	; 0xd38 <__fixunssfsi+0x2c>
 d14:	b9 2f       	mov	r27, r25
 d16:	99 27       	eor	r25, r25
 d18:	b7 51       	subi	r27, 0x17	; 23
 d1a:	a0 f0       	brcs	.+40     	; 0xd44 <__fixunssfsi+0x38>
 d1c:	d1 f0       	breq	.+52     	; 0xd52 <__fixunssfsi+0x46>
 d1e:	66 0f       	add	r22, r22
 d20:	77 1f       	adc	r23, r23
 d22:	88 1f       	adc	r24, r24
 d24:	99 1f       	adc	r25, r25
 d26:	1a f0       	brmi	.+6      	; 0xd2e <__fixunssfsi+0x22>
 d28:	ba 95       	dec	r27
 d2a:	c9 f7       	brne	.-14     	; 0xd1e <__fixunssfsi+0x12>
 d2c:	12 c0       	rjmp	.+36     	; 0xd52 <__fixunssfsi+0x46>
 d2e:	b1 30       	cpi	r27, 0x01	; 1
 d30:	81 f0       	breq	.+32     	; 0xd52 <__fixunssfsi+0x46>
 d32:	9f d0       	rcall	.+318    	; 0xe72 <__fp_zero>
 d34:	b1 e0       	ldi	r27, 0x01	; 1
 d36:	08 95       	ret
 d38:	9c c0       	rjmp	.+312    	; 0xe72 <__fp_zero>
 d3a:	67 2f       	mov	r22, r23
 d3c:	78 2f       	mov	r23, r24
 d3e:	88 27       	eor	r24, r24
 d40:	b8 5f       	subi	r27, 0xF8	; 248
 d42:	39 f0       	breq	.+14     	; 0xd52 <__fixunssfsi+0x46>
 d44:	b9 3f       	cpi	r27, 0xF9	; 249
 d46:	cc f3       	brlt	.-14     	; 0xd3a <__fixunssfsi+0x2e>
 d48:	86 95       	lsr	r24
 d4a:	77 95       	ror	r23
 d4c:	67 95       	ror	r22
 d4e:	b3 95       	inc	r27
 d50:	d9 f7       	brne	.-10     	; 0xd48 <__fixunssfsi+0x3c>
 d52:	3e f4       	brtc	.+14     	; 0xd62 <__fixunssfsi+0x56>
 d54:	90 95       	com	r25
 d56:	80 95       	com	r24
 d58:	70 95       	com	r23
 d5a:	61 95       	neg	r22
 d5c:	7f 4f       	sbci	r23, 0xFF	; 255
 d5e:	8f 4f       	sbci	r24, 0xFF	; 255
 d60:	9f 4f       	sbci	r25, 0xFF	; 255
 d62:	08 95       	ret

00000d64 <__floatunsisf>:
 d64:	e8 94       	clt
 d66:	09 c0       	rjmp	.+18     	; 0xd7a <__floatsisf+0x12>

00000d68 <__floatsisf>:
 d68:	97 fb       	bst	r25, 7
 d6a:	3e f4       	brtc	.+14     	; 0xd7a <__floatsisf+0x12>
 d6c:	90 95       	com	r25
 d6e:	80 95       	com	r24
 d70:	70 95       	com	r23
 d72:	61 95       	neg	r22
 d74:	7f 4f       	sbci	r23, 0xFF	; 255
 d76:	8f 4f       	sbci	r24, 0xFF	; 255
 d78:	9f 4f       	sbci	r25, 0xFF	; 255
 d7a:	99 23       	and	r25, r25
 d7c:	a9 f0       	breq	.+42     	; 0xda8 <__floatsisf+0x40>
 d7e:	f9 2f       	mov	r31, r25
 d80:	96 e9       	ldi	r25, 0x96	; 150
 d82:	bb 27       	eor	r27, r27
 d84:	93 95       	inc	r25
 d86:	f6 95       	lsr	r31
 d88:	87 95       	ror	r24
 d8a:	77 95       	ror	r23
 d8c:	67 95       	ror	r22
 d8e:	b7 95       	ror	r27
 d90:	f1 11       	cpse	r31, r1
 d92:	f8 cf       	rjmp	.-16     	; 0xd84 <__floatsisf+0x1c>
 d94:	fa f4       	brpl	.+62     	; 0xdd4 <__floatsisf+0x6c>
 d96:	bb 0f       	add	r27, r27
 d98:	11 f4       	brne	.+4      	; 0xd9e <__floatsisf+0x36>
 d9a:	60 ff       	sbrs	r22, 0
 d9c:	1b c0       	rjmp	.+54     	; 0xdd4 <__floatsisf+0x6c>
 d9e:	6f 5f       	subi	r22, 0xFF	; 255
 da0:	7f 4f       	sbci	r23, 0xFF	; 255
 da2:	8f 4f       	sbci	r24, 0xFF	; 255
 da4:	9f 4f       	sbci	r25, 0xFF	; 255
 da6:	16 c0       	rjmp	.+44     	; 0xdd4 <__floatsisf+0x6c>
 da8:	88 23       	and	r24, r24
 daa:	11 f0       	breq	.+4      	; 0xdb0 <__floatsisf+0x48>
 dac:	96 e9       	ldi	r25, 0x96	; 150
 dae:	11 c0       	rjmp	.+34     	; 0xdd2 <__floatsisf+0x6a>
 db0:	77 23       	and	r23, r23
 db2:	21 f0       	breq	.+8      	; 0xdbc <__floatsisf+0x54>
 db4:	9e e8       	ldi	r25, 0x8E	; 142
 db6:	87 2f       	mov	r24, r23
 db8:	76 2f       	mov	r23, r22
 dba:	05 c0       	rjmp	.+10     	; 0xdc6 <__floatsisf+0x5e>
 dbc:	66 23       	and	r22, r22
 dbe:	71 f0       	breq	.+28     	; 0xddc <__floatsisf+0x74>
 dc0:	96 e8       	ldi	r25, 0x86	; 134
 dc2:	86 2f       	mov	r24, r22
 dc4:	70 e0       	ldi	r23, 0x00	; 0
 dc6:	60 e0       	ldi	r22, 0x00	; 0
 dc8:	2a f0       	brmi	.+10     	; 0xdd4 <__floatsisf+0x6c>
 dca:	9a 95       	dec	r25
 dcc:	66 0f       	add	r22, r22
 dce:	77 1f       	adc	r23, r23
 dd0:	88 1f       	adc	r24, r24
 dd2:	da f7       	brpl	.-10     	; 0xdca <__floatsisf+0x62>
 dd4:	88 0f       	add	r24, r24
 dd6:	96 95       	lsr	r25
 dd8:	87 95       	ror	r24
 dda:	97 f9       	bld	r25, 7
 ddc:	08 95       	ret

00000dde <__fp_inf>:
 dde:	97 f9       	bld	r25, 7
 de0:	9f 67       	ori	r25, 0x7F	; 127
 de2:	80 e8       	ldi	r24, 0x80	; 128
 de4:	70 e0       	ldi	r23, 0x00	; 0
 de6:	60 e0       	ldi	r22, 0x00	; 0
 de8:	08 95       	ret

00000dea <__fp_nan>:
 dea:	9f ef       	ldi	r25, 0xFF	; 255
 dec:	80 ec       	ldi	r24, 0xC0	; 192
 dee:	08 95       	ret

00000df0 <__fp_pscA>:
 df0:	00 24       	eor	r0, r0
 df2:	0a 94       	dec	r0
 df4:	16 16       	cp	r1, r22
 df6:	17 06       	cpc	r1, r23
 df8:	18 06       	cpc	r1, r24
 dfa:	09 06       	cpc	r0, r25
 dfc:	08 95       	ret

00000dfe <__fp_pscB>:
 dfe:	00 24       	eor	r0, r0
 e00:	0a 94       	dec	r0
 e02:	12 16       	cp	r1, r18
 e04:	13 06       	cpc	r1, r19
 e06:	14 06       	cpc	r1, r20
 e08:	05 06       	cpc	r0, r21
 e0a:	08 95       	ret

00000e0c <__fp_round>:
 e0c:	09 2e       	mov	r0, r25
 e0e:	03 94       	inc	r0
 e10:	00 0c       	add	r0, r0
 e12:	11 f4       	brne	.+4      	; 0xe18 <__fp_round+0xc>
 e14:	88 23       	and	r24, r24
 e16:	52 f0       	brmi	.+20     	; 0xe2c <__fp_round+0x20>
 e18:	bb 0f       	add	r27, r27
 e1a:	40 f4       	brcc	.+16     	; 0xe2c <__fp_round+0x20>
 e1c:	bf 2b       	or	r27, r31
 e1e:	11 f4       	brne	.+4      	; 0xe24 <__fp_round+0x18>
 e20:	60 ff       	sbrs	r22, 0
 e22:	04 c0       	rjmp	.+8      	; 0xe2c <__fp_round+0x20>
 e24:	6f 5f       	subi	r22, 0xFF	; 255
 e26:	7f 4f       	sbci	r23, 0xFF	; 255
 e28:	8f 4f       	sbci	r24, 0xFF	; 255
 e2a:	9f 4f       	sbci	r25, 0xFF	; 255
 e2c:	08 95       	ret

00000e2e <__fp_split3>:
 e2e:	57 fd       	sbrc	r21, 7
 e30:	90 58       	subi	r25, 0x80	; 128
 e32:	44 0f       	add	r20, r20
 e34:	55 1f       	adc	r21, r21
 e36:	59 f0       	breq	.+22     	; 0xe4e <__fp_splitA+0x10>
 e38:	5f 3f       	cpi	r21, 0xFF	; 255
 e3a:	71 f0       	breq	.+28     	; 0xe58 <__fp_splitA+0x1a>
 e3c:	47 95       	ror	r20

00000e3e <__fp_splitA>:
 e3e:	88 0f       	add	r24, r24
 e40:	97 fb       	bst	r25, 7
 e42:	99 1f       	adc	r25, r25
 e44:	61 f0       	breq	.+24     	; 0xe5e <__fp_splitA+0x20>
 e46:	9f 3f       	cpi	r25, 0xFF	; 255
 e48:	79 f0       	breq	.+30     	; 0xe68 <__fp_splitA+0x2a>
 e4a:	87 95       	ror	r24
 e4c:	08 95       	ret
 e4e:	12 16       	cp	r1, r18
 e50:	13 06       	cpc	r1, r19
 e52:	14 06       	cpc	r1, r20
 e54:	55 1f       	adc	r21, r21
 e56:	f2 cf       	rjmp	.-28     	; 0xe3c <__fp_split3+0xe>
 e58:	46 95       	lsr	r20
 e5a:	f1 df       	rcall	.-30     	; 0xe3e <__fp_splitA>
 e5c:	08 c0       	rjmp	.+16     	; 0xe6e <__fp_splitA+0x30>
 e5e:	16 16       	cp	r1, r22
 e60:	17 06       	cpc	r1, r23
 e62:	18 06       	cpc	r1, r24
 e64:	99 1f       	adc	r25, r25
 e66:	f1 cf       	rjmp	.-30     	; 0xe4a <__fp_splitA+0xc>
 e68:	86 95       	lsr	r24
 e6a:	71 05       	cpc	r23, r1
 e6c:	61 05       	cpc	r22, r1
 e6e:	08 94       	sec
 e70:	08 95       	ret

00000e72 <__fp_zero>:
 e72:	e8 94       	clt

00000e74 <__fp_szero>:
 e74:	bb 27       	eor	r27, r27
 e76:	66 27       	eor	r22, r22
 e78:	77 27       	eor	r23, r23
 e7a:	cb 01       	movw	r24, r22
 e7c:	97 f9       	bld	r25, 7
 e7e:	08 95       	ret

00000e80 <__mulsf3>:
 e80:	0a d0       	rcall	.+20     	; 0xe96 <__mulsf3x>
 e82:	c4 cf       	rjmp	.-120    	; 0xe0c <__fp_round>
 e84:	b5 df       	rcall	.-150    	; 0xdf0 <__fp_pscA>
 e86:	28 f0       	brcs	.+10     	; 0xe92 <__mulsf3+0x12>
 e88:	ba df       	rcall	.-140    	; 0xdfe <__fp_pscB>
 e8a:	18 f0       	brcs	.+6      	; 0xe92 <__mulsf3+0x12>
 e8c:	95 23       	and	r25, r21
 e8e:	09 f0       	breq	.+2      	; 0xe92 <__mulsf3+0x12>
 e90:	a6 cf       	rjmp	.-180    	; 0xdde <__fp_inf>
 e92:	ab cf       	rjmp	.-170    	; 0xdea <__fp_nan>
 e94:	ef cf       	rjmp	.-34     	; 0xe74 <__fp_szero>

00000e96 <__mulsf3x>:
 e96:	cb df       	rcall	.-106    	; 0xe2e <__fp_split3>
 e98:	a8 f3       	brcs	.-22     	; 0xe84 <__mulsf3+0x4>

00000e9a <__mulsf3_pse>:
 e9a:	99 23       	and	r25, r25
 e9c:	d9 f3       	breq	.-10     	; 0xe94 <__mulsf3+0x14>
 e9e:	55 23       	and	r21, r21
 ea0:	c9 f3       	breq	.-14     	; 0xe94 <__mulsf3+0x14>
 ea2:	95 0f       	add	r25, r21
 ea4:	50 e0       	ldi	r21, 0x00	; 0
 ea6:	55 1f       	adc	r21, r21
 ea8:	aa 27       	eor	r26, r26
 eaa:	ee 27       	eor	r30, r30
 eac:	ff 27       	eor	r31, r31
 eae:	bb 27       	eor	r27, r27
 eb0:	00 24       	eor	r0, r0
 eb2:	08 94       	sec
 eb4:	67 95       	ror	r22
 eb6:	20 f4       	brcc	.+8      	; 0xec0 <__mulsf3_pse+0x26>
 eb8:	e2 0f       	add	r30, r18
 eba:	f3 1f       	adc	r31, r19
 ebc:	b4 1f       	adc	r27, r20
 ebe:	0a 1e       	adc	r0, r26
 ec0:	22 0f       	add	r18, r18
 ec2:	33 1f       	adc	r19, r19
 ec4:	44 1f       	adc	r20, r20
 ec6:	aa 1f       	adc	r26, r26
 ec8:	66 95       	lsr	r22
 eca:	a9 f7       	brne	.-22     	; 0xeb6 <__mulsf3_pse+0x1c>
 ecc:	77 95       	ror	r23
 ece:	30 f4       	brcc	.+12     	; 0xedc <__mulsf3_pse+0x42>
 ed0:	f3 0f       	add	r31, r19
 ed2:	b4 1f       	adc	r27, r20
 ed4:	0a 1e       	adc	r0, r26
 ed6:	12 1e       	adc	r1, r18
 ed8:	08 f4       	brcc	.+2      	; 0xedc <__mulsf3_pse+0x42>
 eda:	63 95       	inc	r22
 edc:	33 0f       	add	r19, r19
 ede:	44 1f       	adc	r20, r20
 ee0:	aa 1f       	adc	r26, r26
 ee2:	22 1f       	adc	r18, r18
 ee4:	76 95       	lsr	r23
 ee6:	99 f7       	brne	.-26     	; 0xece <__mulsf3_pse+0x34>
 ee8:	87 95       	ror	r24
 eea:	20 f4       	brcc	.+8      	; 0xef4 <__mulsf3_pse+0x5a>
 eec:	b4 0f       	add	r27, r20
 eee:	0a 1e       	adc	r0, r26
 ef0:	12 1e       	adc	r1, r18
 ef2:	63 1f       	adc	r22, r19
 ef4:	44 0f       	add	r20, r20
 ef6:	aa 1f       	adc	r26, r26
 ef8:	22 1f       	adc	r18, r18
 efa:	33 1f       	adc	r19, r19
 efc:	86 95       	lsr	r24
 efe:	a9 f7       	brne	.-22     	; 0xeea <__mulsf3_pse+0x50>
 f00:	86 2f       	mov	r24, r22
 f02:	71 2d       	mov	r23, r1
 f04:	60 2d       	mov	r22, r0
 f06:	11 24       	eor	r1, r1
 f08:	9f 57       	subi	r25, 0x7F	; 127
 f0a:	50 40       	sbci	r21, 0x00	; 0
 f0c:	8a f0       	brmi	.+34     	; 0xf30 <__mulsf3_pse+0x96>
 f0e:	e1 f0       	breq	.+56     	; 0xf48 <__mulsf3_pse+0xae>
 f10:	88 23       	and	r24, r24
 f12:	4a f0       	brmi	.+18     	; 0xf26 <__mulsf3_pse+0x8c>
 f14:	ee 0f       	add	r30, r30
 f16:	ff 1f       	adc	r31, r31
 f18:	bb 1f       	adc	r27, r27
 f1a:	66 1f       	adc	r22, r22
 f1c:	77 1f       	adc	r23, r23
 f1e:	88 1f       	adc	r24, r24
 f20:	91 50       	subi	r25, 0x01	; 1
 f22:	50 40       	sbci	r21, 0x00	; 0
 f24:	a9 f7       	brne	.-22     	; 0xf10 <__mulsf3_pse+0x76>
 f26:	9e 3f       	cpi	r25, 0xFE	; 254
 f28:	51 05       	cpc	r21, r1
 f2a:	70 f0       	brcs	.+28     	; 0xf48 <__mulsf3_pse+0xae>
 f2c:	58 cf       	rjmp	.-336    	; 0xdde <__fp_inf>
 f2e:	a2 cf       	rjmp	.-188    	; 0xe74 <__fp_szero>
 f30:	5f 3f       	cpi	r21, 0xFF	; 255
 f32:	ec f3       	brlt	.-6      	; 0xf2e <__mulsf3_pse+0x94>
 f34:	98 3e       	cpi	r25, 0xE8	; 232
 f36:	dc f3       	brlt	.-10     	; 0xf2e <__mulsf3_pse+0x94>
 f38:	86 95       	lsr	r24
 f3a:	77 95       	ror	r23
 f3c:	67 95       	ror	r22
 f3e:	b7 95       	ror	r27
 f40:	f7 95       	ror	r31
 f42:	e7 95       	ror	r30
 f44:	9f 5f       	subi	r25, 0xFF	; 255
 f46:	c1 f7       	brne	.-16     	; 0xf38 <__mulsf3_pse+0x9e>
 f48:	fe 2b       	or	r31, r30
 f4a:	88 0f       	add	r24, r24
 f4c:	91 1d       	adc	r25, r1
 f4e:	96 95       	lsr	r25
 f50:	87 95       	ror	r24
 f52:	97 f9       	bld	r25, 7
 f54:	08 95       	ret

00000f56 <__udivmodsi4>:
 f56:	a1 e2       	ldi	r26, 0x21	; 33
 f58:	1a 2e       	mov	r1, r26
 f5a:	aa 1b       	sub	r26, r26
 f5c:	bb 1b       	sub	r27, r27
 f5e:	fd 01       	movw	r30, r26
 f60:	0d c0       	rjmp	.+26     	; 0xf7c <__udivmodsi4_ep>

00000f62 <__udivmodsi4_loop>:
 f62:	aa 1f       	adc	r26, r26
 f64:	bb 1f       	adc	r27, r27
 f66:	ee 1f       	adc	r30, r30
 f68:	ff 1f       	adc	r31, r31
 f6a:	a2 17       	cp	r26, r18
 f6c:	b3 07       	cpc	r27, r19
 f6e:	e4 07       	cpc	r30, r20
 f70:	f5 07       	cpc	r31, r21
 f72:	20 f0       	brcs	.+8      	; 0xf7c <__udivmodsi4_ep>
 f74:	a2 1b       	sub	r26, r18
 f76:	b3 0b       	sbc	r27, r19
 f78:	e4 0b       	sbc	r30, r20
 f7a:	f5 0b       	sbc	r31, r21

00000f7c <__udivmodsi4_ep>:
 f7c:	66 1f       	adc	r22, r22
 f7e:	77 1f       	adc	r23, r23
 f80:	88 1f       	adc	r24, r24
 f82:	99 1f       	adc	r25, r25
 f84:	1a 94       	dec	r1
 f86:	69 f7       	brne	.-38     	; 0xf62 <__udivmodsi4_loop>
 f88:	60 95       	com	r22
 f8a:	70 95       	com	r23
 f8c:	80 95       	com	r24
 f8e:	90 95       	com	r25
 f90:	9b 01       	movw	r18, r22
 f92:	ac 01       	movw	r20, r24
 f94:	bd 01       	movw	r22, r26
 f96:	cf 01       	movw	r24, r30
 f98:	08 95       	ret

00000f9a <__divmodsi4>:
 f9a:	05 2e       	mov	r0, r21
 f9c:	97 fb       	bst	r25, 7
 f9e:	16 f4       	brtc	.+4      	; 0xfa4 <__divmodsi4+0xa>
 fa0:	00 94       	com	r0
 fa2:	0f d0       	rcall	.+30     	; 0xfc2 <__negsi2>
 fa4:	57 fd       	sbrc	r21, 7
 fa6:	05 d0       	rcall	.+10     	; 0xfb2 <__divmodsi4_neg2>
 fa8:	d6 df       	rcall	.-84     	; 0xf56 <__udivmodsi4>
 faa:	07 fc       	sbrc	r0, 7
 fac:	02 d0       	rcall	.+4      	; 0xfb2 <__divmodsi4_neg2>
 fae:	46 f4       	brtc	.+16     	; 0xfc0 <__divmodsi4_exit>
 fb0:	08 c0       	rjmp	.+16     	; 0xfc2 <__negsi2>

00000fb2 <__divmodsi4_neg2>:
 fb2:	50 95       	com	r21
 fb4:	40 95       	com	r20
 fb6:	30 95       	com	r19
 fb8:	21 95       	neg	r18
 fba:	3f 4f       	sbci	r19, 0xFF	; 255
 fbc:	4f 4f       	sbci	r20, 0xFF	; 255
 fbe:	5f 4f       	sbci	r21, 0xFF	; 255

00000fc0 <__divmodsi4_exit>:
 fc0:	08 95       	ret

00000fc2 <__negsi2>:
 fc2:	90 95       	com	r25
 fc4:	80 95       	com	r24
 fc6:	70 95       	com	r23
 fc8:	61 95       	neg	r22
 fca:	7f 4f       	sbci	r23, 0xFF	; 255
 fcc:	8f 4f       	sbci	r24, 0xFF	; 255
 fce:	9f 4f       	sbci	r25, 0xFF	; 255
 fd0:	08 95       	ret

00000fd2 <_exit>:
 fd2:	f8 94       	cli

00000fd4 <__stop_program>:
 fd4:	ff cf       	rjmp	.-2      	; 0xfd4 <__stop_program>
